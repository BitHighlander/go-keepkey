package daemon

import (
	"context"
	"os"

	"log"

	keepkey "github.com/solipsis/go-keepkey/pkg/keepkey"
	pb "github.com/solipsis/go-keepkey/rpc/daemon"
)

// Server implements the daemon service
type Server struct {
	kk *keepkey.Keepkey // TODO: convert this to a map of kks
}

// TODO: replace me with middleware
func (s *Server) connect() error {
	kks, err := keepkey.GetDevicesWithConfig(&keepkey.KeepkeyConfig{AutoButton: false})
	if err != nil {
		log.Println(err)
		return err
	}
	s.kk = kks[0]
	s.kk.SetLogger(log.New(os.Stdout, "DEBUG: ", log.Ltime))

	return nil
}

func (s *Server) Ping(ctx context.Context, params *pb.PingParams) (resp *pb.PingResponse, err error) {

	// TODO: middleware handler to deal with initial connecting?
	if s.kk == nil {
		if err := s.connect(); err != nil {
			return nil, err
		}
	}

	msg, err := s.kk.Ping(params.GetMsg(), params.GetDisplay(), params.GetPin(), params.GetPassphrase())
	if err != nil {
		log.Println(err)
		return nil, err
	}

	return &pb.PingResponse{Response: msg}, nil
}

// CHANGE Messages to accept handler funcs for various setups.
// autogenerated clients probably don't want anything handled automatically
//
