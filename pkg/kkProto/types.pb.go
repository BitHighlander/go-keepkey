// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

/*
Package kkProto is a generated protocol buffer package.

It is generated from these files:
	types.proto
	exchange.proto
	messages.proto

It has these top-level messages:
	HDNodeType
	HDNodePathType
	CoinType
	MultisigRedeemScriptType
	TxInputType
	TxOutputType
	TxOutputBinType
	TransactionType
	RawTransactionType
	TxRequestDetailsType
	TxRequestSerializedType
	IdentityType
	PolicyType
	ExchangeType
	ExchangeAddress
	ExchangeResponseV2
	SignedExchangeResponse
	ExchangeResponse
	Initialize
	GetFeatures
	Features
	ClearSession
	ApplySettings
	ChangePin
	Ping
	Success
	Failure
	ButtonRequest
	ButtonAck
	PinMatrixRequest
	PinMatrixAck
	Cancel
	PassphraseRequest
	PassphraseAck
	GetEntropy
	Entropy
	GetPublicKey
	PublicKey
	GetAddress
	EthereumGetAddress
	Address
	EthereumAddress
	WipeDevice
	LoadDevice
	ResetDevice
	EntropyRequest
	EntropyAck
	RecoveryDevice
	WordRequest
	WordAck
	CharacterRequest
	CharacterAck
	SignMessage
	VerifyMessage
	MessageSignature
	EncryptMessage
	EncryptedMessage
	DecryptMessage
	DecryptedMessage
	CipherKeyValue
	CipheredKeyValue
	EstimateTxSize
	TxSize
	SignTx
	SimpleSignTx
	TxRequest
	TxAck
	RawTxAck
	EthereumSignTx
	EthereumTxRequest
	EthereumTxAck
	SignIdentity
	SignedIdentity
	ApplyPolicies
	FlashHash
	FlashWrite
	FlashHashResponse
	DebugLinkFlashDump
	DebugLinkFlashDumpResponse
	SoftReset
	FirmwareErase
	FirmwareUpload
	DebugLinkDecision
	DebugLinkGetState
	DebugLinkState
	DebugLinkStop
	DebugLinkLog
	DebugLinkFillConfig
	DebugLinkScreenDump
*/
package kkProto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// Type of failures returned by Failure message
// @used_in Failure
type FailureType int32

const (
	FailureType_Failure_UnexpectedMessage FailureType = 1
	FailureType_Failure_ButtonExpected    FailureType = 2
	FailureType_Failure_SyntaxError       FailureType = 3
	FailureType_Failure_ActionCancelled   FailureType = 4
	FailureType_Failure_PinExpected       FailureType = 5
	FailureType_Failure_PinCancelled      FailureType = 6
	FailureType_Failure_PinInvalid        FailureType = 7
	FailureType_Failure_InvalidSignature  FailureType = 8
	FailureType_Failure_Other             FailureType = 9
	FailureType_Failure_NotEnoughFunds    FailureType = 10
	FailureType_Failure_NotInitialized    FailureType = 11
	FailureType_Failure_FirmwareError     FailureType = 99
)

var FailureType_name = map[int32]string{
	1:  "Failure_UnexpectedMessage",
	2:  "Failure_ButtonExpected",
	3:  "Failure_SyntaxError",
	4:  "Failure_ActionCancelled",
	5:  "Failure_PinExpected",
	6:  "Failure_PinCancelled",
	7:  "Failure_PinInvalid",
	8:  "Failure_InvalidSignature",
	9:  "Failure_Other",
	10: "Failure_NotEnoughFunds",
	11: "Failure_NotInitialized",
	99: "Failure_FirmwareError",
}
var FailureType_value = map[string]int32{
	"Failure_UnexpectedMessage": 1,
	"Failure_ButtonExpected":    2,
	"Failure_SyntaxError":       3,
	"Failure_ActionCancelled":   4,
	"Failure_PinExpected":       5,
	"Failure_PinCancelled":      6,
	"Failure_PinInvalid":        7,
	"Failure_InvalidSignature":  8,
	"Failure_Other":             9,
	"Failure_NotEnoughFunds":    10,
	"Failure_NotInitialized":    11,
	"Failure_FirmwareError":     99,
}

func (x FailureType) Enum() *FailureType {
	p := new(FailureType)
	*p = x
	return p
}
func (x FailureType) String() string {
	return proto.EnumName(FailureType_name, int32(x))
}
func (x *FailureType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FailureType_value, data, "FailureType")
	if err != nil {
		return err
	}
	*x = FailureType(value)
	return nil
}
func (FailureType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// *
// Type of script which will be used for transaction output
// @used_in TxOutputType
type OutputScriptType int32

const (
	OutputScriptType_PAYTOADDRESS     OutputScriptType = 0
	OutputScriptType_PAYTOSCRIPTHASH  OutputScriptType = 1
	OutputScriptType_PAYTOMULTISIG    OutputScriptType = 2
	OutputScriptType_PAYTOOPRETURN    OutputScriptType = 3
	OutputScriptType_PAYTOWITNESS     OutputScriptType = 4
	OutputScriptType_PAYTOP2SHWITNESS OutputScriptType = 5
)

var OutputScriptType_name = map[int32]string{
	0: "PAYTOADDRESS",
	1: "PAYTOSCRIPTHASH",
	2: "PAYTOMULTISIG",
	3: "PAYTOOPRETURN",
	4: "PAYTOWITNESS",
	5: "PAYTOP2SHWITNESS",
}
var OutputScriptType_value = map[string]int32{
	"PAYTOADDRESS":     0,
	"PAYTOSCRIPTHASH":  1,
	"PAYTOMULTISIG":    2,
	"PAYTOOPRETURN":    3,
	"PAYTOWITNESS":     4,
	"PAYTOP2SHWITNESS": 5,
}

func (x OutputScriptType) Enum() *OutputScriptType {
	p := new(OutputScriptType)
	*p = x
	return p
}
func (x OutputScriptType) String() string {
	return proto.EnumName(OutputScriptType_name, int32(x))
}
func (x *OutputScriptType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OutputScriptType_value, data, "OutputScriptType")
	if err != nil {
		return err
	}
	*x = OutputScriptType(value)
	return nil
}
func (OutputScriptType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// *
// Type of script which will be used for transaction output
// @used_in TxInputType
type InputScriptType int32

const (
	InputScriptType_SPENDADDRESS     InputScriptType = 0
	InputScriptType_SPENDMULTISIG    InputScriptType = 1
	InputScriptType_EXTERNAL         InputScriptType = 2
	InputScriptType_SPENDWITNESS     InputScriptType = 3
	InputScriptType_SPENDP2SHWITNESS InputScriptType = 4
)

var InputScriptType_name = map[int32]string{
	0: "SPENDADDRESS",
	1: "SPENDMULTISIG",
	2: "EXTERNAL",
	3: "SPENDWITNESS",
	4: "SPENDP2SHWITNESS",
}
var InputScriptType_value = map[string]int32{
	"SPENDADDRESS":     0,
	"SPENDMULTISIG":    1,
	"EXTERNAL":         2,
	"SPENDWITNESS":     3,
	"SPENDP2SHWITNESS": 4,
}

func (x InputScriptType) Enum() *InputScriptType {
	p := new(InputScriptType)
	*p = x
	return p
}
func (x InputScriptType) String() string {
	return proto.EnumName(InputScriptType_name, int32(x))
}
func (x *InputScriptType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(InputScriptType_value, data, "InputScriptType")
	if err != nil {
		return err
	}
	*x = InputScriptType(value)
	return nil
}
func (InputScriptType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// *
// Type of information required by transaction signing process
// @used_in TxRequest
type RequestType int32

const (
	RequestType_TXINPUT     RequestType = 0
	RequestType_TXOUTPUT    RequestType = 1
	RequestType_TXMETA      RequestType = 2
	RequestType_TXFINISHED  RequestType = 3
	RequestType_TXEXTRADATA RequestType = 4
)

var RequestType_name = map[int32]string{
	0: "TXINPUT",
	1: "TXOUTPUT",
	2: "TXMETA",
	3: "TXFINISHED",
	4: "TXEXTRADATA",
}
var RequestType_value = map[string]int32{
	"TXINPUT":     0,
	"TXOUTPUT":    1,
	"TXMETA":      2,
	"TXFINISHED":  3,
	"TXEXTRADATA": 4,
}

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}
func (x RequestType) String() string {
	return proto.EnumName(RequestType_name, int32(x))
}
func (x *RequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RequestType_value, data, "RequestType")
	if err != nil {
		return err
	}
	*x = RequestType(value)
	return nil
}
func (RequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// *
// Type of ouput address specify in transaction
// @used_in TxOutputType
type OutputAddressType int32

const (
	OutputAddressType_SPEND    OutputAddressType = 0
	OutputAddressType_TRANSFER OutputAddressType = 1
	OutputAddressType_CHANGE   OutputAddressType = 2
	OutputAddressType_EXCHANGE OutputAddressType = 3
)

var OutputAddressType_name = map[int32]string{
	0: "SPEND",
	1: "TRANSFER",
	2: "CHANGE",
	3: "EXCHANGE",
}
var OutputAddressType_value = map[string]int32{
	"SPEND":    0,
	"TRANSFER": 1,
	"CHANGE":   2,
	"EXCHANGE": 3,
}

func (x OutputAddressType) Enum() *OutputAddressType {
	p := new(OutputAddressType)
	*p = x
	return p
}
func (x OutputAddressType) String() string {
	return proto.EnumName(OutputAddressType_name, int32(x))
}
func (x *OutputAddressType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OutputAddressType_value, data, "OutputAddressType")
	if err != nil {
		return err
	}
	*x = OutputAddressType(value)
	return nil
}
func (OutputAddressType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// *
// Type of button request
// @used_in ButtonRequest
type ButtonRequestType int32

const (
	ButtonRequestType_ButtonRequest_Other                     ButtonRequestType = 1
	ButtonRequestType_ButtonRequest_FeeOverThreshold          ButtonRequestType = 2
	ButtonRequestType_ButtonRequest_ConfirmOutput             ButtonRequestType = 3
	ButtonRequestType_ButtonRequest_ResetDevice               ButtonRequestType = 4
	ButtonRequestType_ButtonRequest_ConfirmWord               ButtonRequestType = 5
	ButtonRequestType_ButtonRequest_WipeDevice                ButtonRequestType = 6
	ButtonRequestType_ButtonRequest_ProtectCall               ButtonRequestType = 7
	ButtonRequestType_ButtonRequest_SignTx                    ButtonRequestType = 8
	ButtonRequestType_ButtonRequest_FirmwareCheck             ButtonRequestType = 9
	ButtonRequestType_ButtonRequest_Address                   ButtonRequestType = 10
	ButtonRequestType_ButtonRequest_FirmwareErase             ButtonRequestType = 11
	ButtonRequestType_ButtonRequest_ConfirmTransferToAccount  ButtonRequestType = 12
	ButtonRequestType_ButtonRequest_ConfirmTransferToNodePath ButtonRequestType = 13
	ButtonRequestType_ButtonRequest_ChangeLabel               ButtonRequestType = 14
	ButtonRequestType_ButtonRequest_ChangeLanguage            ButtonRequestType = 15
	ButtonRequestType_ButtonRequest_EnablePassphrase          ButtonRequestType = 16
	ButtonRequestType_ButtonRequest_DisablePassphrase         ButtonRequestType = 17
	ButtonRequestType_ButtonRequest_EncryptAndSignMessage     ButtonRequestType = 18
	ButtonRequestType_ButtonRequest_EncryptMessage            ButtonRequestType = 19
	ButtonRequestType_ButtonRequest_ImportPrivateKey          ButtonRequestType = 20
	ButtonRequestType_ButtonRequest_ImportRecoverySentence    ButtonRequestType = 21
	ButtonRequestType_ButtonRequest_SignIdentity              ButtonRequestType = 22
	ButtonRequestType_ButtonRequest_Ping                      ButtonRequestType = 23
	ButtonRequestType_ButtonRequest_RemovePin                 ButtonRequestType = 24
	ButtonRequestType_ButtonRequest_ChangePin                 ButtonRequestType = 25
	ButtonRequestType_ButtonRequest_CreatePin                 ButtonRequestType = 26
	ButtonRequestType_ButtonRequest_GetEntropy                ButtonRequestType = 27
	ButtonRequestType_ButtonRequest_SignMessage               ButtonRequestType = 28
	ButtonRequestType_ButtonRequest_ApplyPolicies             ButtonRequestType = 29
	ButtonRequestType_ButtonRequest_SignExchange              ButtonRequestType = 30
)

var ButtonRequestType_name = map[int32]string{
	1:  "ButtonRequest_Other",
	2:  "ButtonRequest_FeeOverThreshold",
	3:  "ButtonRequest_ConfirmOutput",
	4:  "ButtonRequest_ResetDevice",
	5:  "ButtonRequest_ConfirmWord",
	6:  "ButtonRequest_WipeDevice",
	7:  "ButtonRequest_ProtectCall",
	8:  "ButtonRequest_SignTx",
	9:  "ButtonRequest_FirmwareCheck",
	10: "ButtonRequest_Address",
	11: "ButtonRequest_FirmwareErase",
	12: "ButtonRequest_ConfirmTransferToAccount",
	13: "ButtonRequest_ConfirmTransferToNodePath",
	14: "ButtonRequest_ChangeLabel",
	15: "ButtonRequest_ChangeLanguage",
	16: "ButtonRequest_EnablePassphrase",
	17: "ButtonRequest_DisablePassphrase",
	18: "ButtonRequest_EncryptAndSignMessage",
	19: "ButtonRequest_EncryptMessage",
	20: "ButtonRequest_ImportPrivateKey",
	21: "ButtonRequest_ImportRecoverySentence",
	22: "ButtonRequest_SignIdentity",
	23: "ButtonRequest_Ping",
	24: "ButtonRequest_RemovePin",
	25: "ButtonRequest_ChangePin",
	26: "ButtonRequest_CreatePin",
	27: "ButtonRequest_GetEntropy",
	28: "ButtonRequest_SignMessage",
	29: "ButtonRequest_ApplyPolicies",
	30: "ButtonRequest_SignExchange",
}
var ButtonRequestType_value = map[string]int32{
	"ButtonRequest_Other":                     1,
	"ButtonRequest_FeeOverThreshold":          2,
	"ButtonRequest_ConfirmOutput":             3,
	"ButtonRequest_ResetDevice":               4,
	"ButtonRequest_ConfirmWord":               5,
	"ButtonRequest_WipeDevice":                6,
	"ButtonRequest_ProtectCall":               7,
	"ButtonRequest_SignTx":                    8,
	"ButtonRequest_FirmwareCheck":             9,
	"ButtonRequest_Address":                   10,
	"ButtonRequest_FirmwareErase":             11,
	"ButtonRequest_ConfirmTransferToAccount":  12,
	"ButtonRequest_ConfirmTransferToNodePath": 13,
	"ButtonRequest_ChangeLabel":               14,
	"ButtonRequest_ChangeLanguage":            15,
	"ButtonRequest_EnablePassphrase":          16,
	"ButtonRequest_DisablePassphrase":         17,
	"ButtonRequest_EncryptAndSignMessage":     18,
	"ButtonRequest_EncryptMessage":            19,
	"ButtonRequest_ImportPrivateKey":          20,
	"ButtonRequest_ImportRecoverySentence":    21,
	"ButtonRequest_SignIdentity":              22,
	"ButtonRequest_Ping":                      23,
	"ButtonRequest_RemovePin":                 24,
	"ButtonRequest_ChangePin":                 25,
	"ButtonRequest_CreatePin":                 26,
	"ButtonRequest_GetEntropy":                27,
	"ButtonRequest_SignMessage":               28,
	"ButtonRequest_ApplyPolicies":             29,
	"ButtonRequest_SignExchange":              30,
}

func (x ButtonRequestType) Enum() *ButtonRequestType {
	p := new(ButtonRequestType)
	*p = x
	return p
}
func (x ButtonRequestType) String() string {
	return proto.EnumName(ButtonRequestType_name, int32(x))
}
func (x *ButtonRequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ButtonRequestType_value, data, "ButtonRequestType")
	if err != nil {
		return err
	}
	*x = ButtonRequestType(value)
	return nil
}
func (ButtonRequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// *
// Type of PIN request
// @used_in PinMatrixRequest
type PinMatrixRequestType int32

const (
	PinMatrixRequestType_PinMatrixRequestType_Current   PinMatrixRequestType = 1
	PinMatrixRequestType_PinMatrixRequestType_NewFirst  PinMatrixRequestType = 2
	PinMatrixRequestType_PinMatrixRequestType_NewSecond PinMatrixRequestType = 3
)

var PinMatrixRequestType_name = map[int32]string{
	1: "PinMatrixRequestType_Current",
	2: "PinMatrixRequestType_NewFirst",
	3: "PinMatrixRequestType_NewSecond",
}
var PinMatrixRequestType_value = map[string]int32{
	"PinMatrixRequestType_Current":   1,
	"PinMatrixRequestType_NewFirst":  2,
	"PinMatrixRequestType_NewSecond": 3,
}

func (x PinMatrixRequestType) Enum() *PinMatrixRequestType {
	p := new(PinMatrixRequestType)
	*p = x
	return p
}
func (x PinMatrixRequestType) String() string {
	return proto.EnumName(PinMatrixRequestType_name, int32(x))
}
func (x *PinMatrixRequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PinMatrixRequestType_value, data, "PinMatrixRequestType")
	if err != nil {
		return err
	}
	*x = PinMatrixRequestType(value)
	return nil
}
func (PinMatrixRequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// *
// Structure representing BIP32 (hierarchical deterministic) node
// Used for imports of private key into the device and exporting public key out of device
// @used_in PublicKey
// @used_in LoadDevice
// @used_in DebugLinkState
// @used_in Storage
type HDNodeType struct {
	Depth            *uint32 `protobuf:"varint,1,req,name=depth" json:"depth,omitempty"`
	Fingerprint      *uint32 `protobuf:"varint,2,req,name=fingerprint" json:"fingerprint,omitempty"`
	ChildNum         *uint32 `protobuf:"varint,3,req,name=child_num,json=childNum" json:"child_num,omitempty"`
	ChainCode        []byte  `protobuf:"bytes,4,req,name=chain_code,json=chainCode" json:"chain_code,omitempty"`
	PrivateKey       []byte  `protobuf:"bytes,5,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	PublicKey        []byte  `protobuf:"bytes,6,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HDNodeType) Reset()                    { *m = HDNodeType{} }
func (m *HDNodeType) String() string            { return proto.CompactTextString(m) }
func (*HDNodeType) ProtoMessage()               {}
func (*HDNodeType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HDNodeType) GetDepth() uint32 {
	if m != nil && m.Depth != nil {
		return *m.Depth
	}
	return 0
}

func (m *HDNodeType) GetFingerprint() uint32 {
	if m != nil && m.Fingerprint != nil {
		return *m.Fingerprint
	}
	return 0
}

func (m *HDNodeType) GetChildNum() uint32 {
	if m != nil && m.ChildNum != nil {
		return *m.ChildNum
	}
	return 0
}

func (m *HDNodeType) GetChainCode() []byte {
	if m != nil {
		return m.ChainCode
	}
	return nil
}

func (m *HDNodeType) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *HDNodeType) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type HDNodePathType struct {
	Node             *HDNodeType `protobuf:"bytes,1,req,name=node" json:"node,omitempty"`
	AddressN         []uint32    `protobuf:"varint,2,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *HDNodePathType) Reset()                    { *m = HDNodePathType{} }
func (m *HDNodePathType) String() string            { return proto.CompactTextString(m) }
func (*HDNodePathType) ProtoMessage()               {}
func (*HDNodePathType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HDNodePathType) GetNode() *HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *HDNodePathType) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

// *
// Structure representing Coin
// @used_in Features
type CoinType struct {
	CoinName            *string `protobuf:"bytes,1,opt,name=coin_name,json=coinName" json:"coin_name,omitempty"`
	CoinShortcut        *string `protobuf:"bytes,2,opt,name=coin_shortcut,json=coinShortcut" json:"coin_shortcut,omitempty"`
	AddressType         *uint32 `protobuf:"varint,3,opt,name=address_type,json=addressType,def=0" json:"address_type,omitempty"`
	MaxfeeKb            *uint64 `protobuf:"varint,4,opt,name=maxfee_kb,json=maxfeeKb" json:"maxfee_kb,omitempty"`
	AddressTypeP2Sh     *uint32 `protobuf:"varint,5,opt,name=address_type_p2sh,json=addressTypeP2sh,def=5" json:"address_type_p2sh,omitempty"`
	AddressTypeP2Wpkh   *uint32 `protobuf:"varint,6,opt,name=address_type_p2wpkh,json=addressTypeP2wpkh,def=6" json:"address_type_p2wpkh,omitempty"`
	AddressTypeP2Wsh    *uint32 `protobuf:"varint,7,opt,name=address_type_p2wsh,json=addressTypeP2wsh,def=10" json:"address_type_p2wsh,omitempty"`
	SignedMessageHeader *string `protobuf:"bytes,8,opt,name=signed_message_header,json=signedMessageHeader" json:"signed_message_header,omitempty"`
	Bip44AccountPath    *uint32 `protobuf:"varint,9,opt,name=bip44_account_path,json=bip44AccountPath" json:"bip44_account_path,omitempty"`
	Forkid              *uint32 `protobuf:"varint,12,opt,name=forkid" json:"forkid,omitempty"`
	Decimals            *uint32 `protobuf:"varint,13,opt,name=decimals" json:"decimals,omitempty"`
	ContractAddress     []byte  `protobuf:"bytes,14,opt,name=contract_address,json=contractAddress" json:"contract_address,omitempty"`
	GasLimit            []byte  `protobuf:"bytes,15,opt,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *CoinType) Reset()                    { *m = CoinType{} }
func (m *CoinType) String() string            { return proto.CompactTextString(m) }
func (*CoinType) ProtoMessage()               {}
func (*CoinType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

const Default_CoinType_AddressType uint32 = 0
const Default_CoinType_AddressTypeP2Sh uint32 = 5
const Default_CoinType_AddressTypeP2Wpkh uint32 = 6
const Default_CoinType_AddressTypeP2Wsh uint32 = 10

func (m *CoinType) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return ""
}

func (m *CoinType) GetCoinShortcut() string {
	if m != nil && m.CoinShortcut != nil {
		return *m.CoinShortcut
	}
	return ""
}

func (m *CoinType) GetAddressType() uint32 {
	if m != nil && m.AddressType != nil {
		return *m.AddressType
	}
	return Default_CoinType_AddressType
}

func (m *CoinType) GetMaxfeeKb() uint64 {
	if m != nil && m.MaxfeeKb != nil {
		return *m.MaxfeeKb
	}
	return 0
}

func (m *CoinType) GetAddressTypeP2Sh() uint32 {
	if m != nil && m.AddressTypeP2Sh != nil {
		return *m.AddressTypeP2Sh
	}
	return Default_CoinType_AddressTypeP2Sh
}

func (m *CoinType) GetAddressTypeP2Wpkh() uint32 {
	if m != nil && m.AddressTypeP2Wpkh != nil {
		return *m.AddressTypeP2Wpkh
	}
	return Default_CoinType_AddressTypeP2Wpkh
}

func (m *CoinType) GetAddressTypeP2Wsh() uint32 {
	if m != nil && m.AddressTypeP2Wsh != nil {
		return *m.AddressTypeP2Wsh
	}
	return Default_CoinType_AddressTypeP2Wsh
}

func (m *CoinType) GetSignedMessageHeader() string {
	if m != nil && m.SignedMessageHeader != nil {
		return *m.SignedMessageHeader
	}
	return ""
}

func (m *CoinType) GetBip44AccountPath() uint32 {
	if m != nil && m.Bip44AccountPath != nil {
		return *m.Bip44AccountPath
	}
	return 0
}

func (m *CoinType) GetForkid() uint32 {
	if m != nil && m.Forkid != nil {
		return *m.Forkid
	}
	return 0
}

func (m *CoinType) GetDecimals() uint32 {
	if m != nil && m.Decimals != nil {
		return *m.Decimals
	}
	return 0
}

func (m *CoinType) GetContractAddress() []byte {
	if m != nil {
		return m.ContractAddress
	}
	return nil
}

func (m *CoinType) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

// *
// Type of redeem script used in input
// @used_in TxInputType
type MultisigRedeemScriptType struct {
	Pubkeys          []*HDNodePathType `protobuf:"bytes,1,rep,name=pubkeys" json:"pubkeys,omitempty"`
	Signatures       [][]byte          `protobuf:"bytes,2,rep,name=signatures" json:"signatures,omitempty"`
	M                *uint32           `protobuf:"varint,3,opt,name=m" json:"m,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *MultisigRedeemScriptType) Reset()                    { *m = MultisigRedeemScriptType{} }
func (m *MultisigRedeemScriptType) String() string            { return proto.CompactTextString(m) }
func (*MultisigRedeemScriptType) ProtoMessage()               {}
func (*MultisigRedeemScriptType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MultisigRedeemScriptType) GetPubkeys() []*HDNodePathType {
	if m != nil {
		return m.Pubkeys
	}
	return nil
}

func (m *MultisigRedeemScriptType) GetSignatures() [][]byte {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *MultisigRedeemScriptType) GetM() uint32 {
	if m != nil && m.M != nil {
		return *m.M
	}
	return 0
}

// *
// Structure representing transaction input
// @used_in SimpleSignTx
// @used_in TransactionType
type TxInputType struct {
	AddressN         []uint32                  `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	PrevHash         []byte                    `protobuf:"bytes,2,req,name=prev_hash,json=prevHash" json:"prev_hash,omitempty"`
	PrevIndex        *uint32                   `protobuf:"varint,3,req,name=prev_index,json=prevIndex" json:"prev_index,omitempty"`
	ScriptSig        []byte                    `protobuf:"bytes,4,opt,name=script_sig,json=scriptSig" json:"script_sig,omitempty"`
	Sequence         *uint32                   `protobuf:"varint,5,opt,name=sequence,def=4294967295" json:"sequence,omitempty"`
	ScriptType       *InputScriptType          `protobuf:"varint,6,opt,name=script_type,json=scriptType,enum=InputScriptType,def=0" json:"script_type,omitempty"`
	Multisig         *MultisigRedeemScriptType `protobuf:"bytes,7,opt,name=multisig" json:"multisig,omitempty"`
	Amount           *uint64                   `protobuf:"varint,8,opt,name=amount" json:"amount,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *TxInputType) Reset()                    { *m = TxInputType{} }
func (m *TxInputType) String() string            { return proto.CompactTextString(m) }
func (*TxInputType) ProtoMessage()               {}
func (*TxInputType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

const Default_TxInputType_Sequence uint32 = 4294967295
const Default_TxInputType_ScriptType InputScriptType = InputScriptType_SPENDADDRESS

func (m *TxInputType) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *TxInputType) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *TxInputType) GetPrevIndex() uint32 {
	if m != nil && m.PrevIndex != nil {
		return *m.PrevIndex
	}
	return 0
}

func (m *TxInputType) GetScriptSig() []byte {
	if m != nil {
		return m.ScriptSig
	}
	return nil
}

func (m *TxInputType) GetSequence() uint32 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return Default_TxInputType_Sequence
}

func (m *TxInputType) GetScriptType() InputScriptType {
	if m != nil && m.ScriptType != nil {
		return *m.ScriptType
	}
	return Default_TxInputType_ScriptType
}

func (m *TxInputType) GetMultisig() *MultisigRedeemScriptType {
	if m != nil {
		return m.Multisig
	}
	return nil
}

func (m *TxInputType) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

// *
// Structure representing transaction output
// @used_in SimpleSignTx
// @used_in TransactionType
type TxOutputType struct {
	Address          *string                   `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	AddressN         []uint32                  `protobuf:"varint,2,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Amount           *uint64                   `protobuf:"varint,3,req,name=amount" json:"amount,omitempty"`
	ScriptType       *OutputScriptType         `protobuf:"varint,4,req,name=script_type,json=scriptType,enum=OutputScriptType" json:"script_type,omitempty"`
	Multisig         *MultisigRedeemScriptType `protobuf:"bytes,5,opt,name=multisig" json:"multisig,omitempty"`
	OpReturnData     []byte                    `protobuf:"bytes,6,opt,name=op_return_data,json=opReturnData" json:"op_return_data,omitempty"`
	AddressType      *OutputAddressType        `protobuf:"varint,7,opt,name=address_type,json=addressType,enum=OutputAddressType" json:"address_type,omitempty"`
	ExchangeType     *ExchangeType             `protobuf:"bytes,8,opt,name=exchange_type,json=exchangeType" json:"exchange_type,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *TxOutputType) Reset()                    { *m = TxOutputType{} }
func (m *TxOutputType) String() string            { return proto.CompactTextString(m) }
func (*TxOutputType) ProtoMessage()               {}
func (*TxOutputType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TxOutputType) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *TxOutputType) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *TxOutputType) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *TxOutputType) GetScriptType() OutputScriptType {
	if m != nil && m.ScriptType != nil {
		return *m.ScriptType
	}
	return OutputScriptType_PAYTOADDRESS
}

func (m *TxOutputType) GetMultisig() *MultisigRedeemScriptType {
	if m != nil {
		return m.Multisig
	}
	return nil
}

func (m *TxOutputType) GetOpReturnData() []byte {
	if m != nil {
		return m.OpReturnData
	}
	return nil
}

func (m *TxOutputType) GetAddressType() OutputAddressType {
	if m != nil && m.AddressType != nil {
		return *m.AddressType
	}
	return OutputAddressType_SPEND
}

func (m *TxOutputType) GetExchangeType() *ExchangeType {
	if m != nil {
		return m.ExchangeType
	}
	return nil
}

// *
// Structure representing compiled transaction output
// @used_in TransactionType
type TxOutputBinType struct {
	Amount           *uint64 `protobuf:"varint,1,req,name=amount" json:"amount,omitempty"`
	ScriptPubkey     []byte  `protobuf:"bytes,2,req,name=script_pubkey,json=scriptPubkey" json:"script_pubkey,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TxOutputBinType) Reset()                    { *m = TxOutputBinType{} }
func (m *TxOutputBinType) String() string            { return proto.CompactTextString(m) }
func (*TxOutputBinType) ProtoMessage()               {}
func (*TxOutputBinType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TxOutputBinType) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *TxOutputBinType) GetScriptPubkey() []byte {
	if m != nil {
		return m.ScriptPubkey
	}
	return nil
}

// *
// Structure representing transaction
// @used_in SimpleSignTx,
type TransactionType struct {
	Version          *uint32            `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Inputs           []*TxInputType     `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty"`
	BinOutputs       []*TxOutputBinType `protobuf:"bytes,3,rep,name=bin_outputs,json=binOutputs" json:"bin_outputs,omitempty"`
	Outputs          []*TxOutputType    `protobuf:"bytes,5,rep,name=outputs" json:"outputs,omitempty"`
	LockTime         *uint32            `protobuf:"varint,4,opt,name=lock_time,json=lockTime" json:"lock_time,omitempty"`
	InputsCnt        *uint32            `protobuf:"varint,6,opt,name=inputs_cnt,json=inputsCnt" json:"inputs_cnt,omitempty"`
	OutputsCnt       *uint32            `protobuf:"varint,7,opt,name=outputs_cnt,json=outputsCnt" json:"outputs_cnt,omitempty"`
	ExtraData        []byte             `protobuf:"bytes,8,opt,name=extra_data,json=extraData" json:"extra_data,omitempty"`
	ExtraDataLen     *uint32            `protobuf:"varint,9,opt,name=extra_data_len,json=extraDataLen" json:"extra_data_len,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *TransactionType) Reset()                    { *m = TransactionType{} }
func (m *TransactionType) String() string            { return proto.CompactTextString(m) }
func (*TransactionType) ProtoMessage()               {}
func (*TransactionType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TransactionType) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *TransactionType) GetInputs() []*TxInputType {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *TransactionType) GetBinOutputs() []*TxOutputBinType {
	if m != nil {
		return m.BinOutputs
	}
	return nil
}

func (m *TransactionType) GetOutputs() []*TxOutputType {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *TransactionType) GetLockTime() uint32 {
	if m != nil && m.LockTime != nil {
		return *m.LockTime
	}
	return 0
}

func (m *TransactionType) GetInputsCnt() uint32 {
	if m != nil && m.InputsCnt != nil {
		return *m.InputsCnt
	}
	return 0
}

func (m *TransactionType) GetOutputsCnt() uint32 {
	if m != nil && m.OutputsCnt != nil {
		return *m.OutputsCnt
	}
	return 0
}

func (m *TransactionType) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *TransactionType) GetExtraDataLen() uint32 {
	if m != nil && m.ExtraDataLen != nil {
		return *m.ExtraDataLen
	}
	return 0
}

// *
// Structure representing raw transaction
// @used_in RawTxAck
type RawTransactionType struct {
	Payload          []byte `protobuf:"bytes,1,req,name=payload" json:"payload,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RawTransactionType) Reset()                    { *m = RawTransactionType{} }
func (m *RawTransactionType) String() string            { return proto.CompactTextString(m) }
func (*RawTransactionType) ProtoMessage()               {}
func (*RawTransactionType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RawTransactionType) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// *
// Structure representing request details
// @used_in TxRequest
type TxRequestDetailsType struct {
	RequestIndex     *uint32 `protobuf:"varint,1,opt,name=request_index,json=requestIndex" json:"request_index,omitempty"`
	TxHash           []byte  `protobuf:"bytes,2,opt,name=tx_hash,json=txHash" json:"tx_hash,omitempty"`
	ExtraDataLen     *uint32 `protobuf:"varint,3,opt,name=extra_data_len,json=extraDataLen" json:"extra_data_len,omitempty"`
	ExtraDataOffset  *uint32 `protobuf:"varint,4,opt,name=extra_data_offset,json=extraDataOffset" json:"extra_data_offset,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TxRequestDetailsType) Reset()                    { *m = TxRequestDetailsType{} }
func (m *TxRequestDetailsType) String() string            { return proto.CompactTextString(m) }
func (*TxRequestDetailsType) ProtoMessage()               {}
func (*TxRequestDetailsType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TxRequestDetailsType) GetRequestIndex() uint32 {
	if m != nil && m.RequestIndex != nil {
		return *m.RequestIndex
	}
	return 0
}

func (m *TxRequestDetailsType) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *TxRequestDetailsType) GetExtraDataLen() uint32 {
	if m != nil && m.ExtraDataLen != nil {
		return *m.ExtraDataLen
	}
	return 0
}

func (m *TxRequestDetailsType) GetExtraDataOffset() uint32 {
	if m != nil && m.ExtraDataOffset != nil {
		return *m.ExtraDataOffset
	}
	return 0
}

// *
// Structure representing serialized data
// @used_in TxRequest
type TxRequestSerializedType struct {
	SignatureIndex   *uint32 `protobuf:"varint,1,opt,name=signature_index,json=signatureIndex" json:"signature_index,omitempty"`
	Signature        []byte  `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	SerializedTx     []byte  `protobuf:"bytes,3,opt,name=serialized_tx,json=serializedTx" json:"serialized_tx,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TxRequestSerializedType) Reset()                    { *m = TxRequestSerializedType{} }
func (m *TxRequestSerializedType) String() string            { return proto.CompactTextString(m) }
func (*TxRequestSerializedType) ProtoMessage()               {}
func (*TxRequestSerializedType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TxRequestSerializedType) GetSignatureIndex() uint32 {
	if m != nil && m.SignatureIndex != nil {
		return *m.SignatureIndex
	}
	return 0
}

func (m *TxRequestSerializedType) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *TxRequestSerializedType) GetSerializedTx() []byte {
	if m != nil {
		return m.SerializedTx
	}
	return nil
}

// *
// Structure representing identity data
// @used_in IdentityType
type IdentityType struct {
	Proto            *string `protobuf:"bytes,1,opt,name=proto" json:"proto,omitempty"`
	User             *string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Host             *string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	Port             *string `protobuf:"bytes,4,opt,name=port" json:"port,omitempty"`
	Path             *string `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`
	Index            *uint32 `protobuf:"varint,6,opt,name=index,def=0" json:"index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IdentityType) Reset()                    { *m = IdentityType{} }
func (m *IdentityType) String() string            { return proto.CompactTextString(m) }
func (*IdentityType) ProtoMessage()               {}
func (*IdentityType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

const Default_IdentityType_Index uint32 = 0

func (m *IdentityType) GetProto() string {
	if m != nil && m.Proto != nil {
		return *m.Proto
	}
	return ""
}

func (m *IdentityType) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

func (m *IdentityType) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *IdentityType) GetPort() string {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return ""
}

func (m *IdentityType) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *IdentityType) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return Default_IdentityType_Index
}

// *
// Structure representing policy data
// @used_in ApplyPolicy
type PolicyType struct {
	PolicyName       *string `protobuf:"bytes,1,opt,name=policy_name,json=policyName" json:"policy_name,omitempty"`
	Enabled          *bool   `protobuf:"varint,2,opt,name=enabled" json:"enabled,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PolicyType) Reset()                    { *m = PolicyType{} }
func (m *PolicyType) String() string            { return proto.CompactTextString(m) }
func (*PolicyType) ProtoMessage()               {}
func (*PolicyType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PolicyType) GetPolicyName() string {
	if m != nil && m.PolicyName != nil {
		return *m.PolicyName
	}
	return ""
}

func (m *PolicyType) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return false
}

// *
// Structure representing exchange data
// @used_in TxOutputType
type ExchangeType struct {
	SignedExchangeResponse *SignedExchangeResponse `protobuf:"bytes,1,opt,name=signed_exchange_response,json=signedExchangeResponse" json:"signed_exchange_response,omitempty"`
	WithdrawalCoinName     *string                 `protobuf:"bytes,2,opt,name=withdrawal_coin_name,json=withdrawalCoinName,def=Bitcoin" json:"withdrawal_coin_name,omitempty"`
	WithdrawalAddressN     []uint32                `protobuf:"varint,3,rep,name=withdrawal_address_n,json=withdrawalAddressN" json:"withdrawal_address_n,omitempty"`
	ReturnAddressN         []uint32                `protobuf:"varint,4,rep,name=return_address_n,json=returnAddressN" json:"return_address_n,omitempty"`
	XXX_unrecognized       []byte                  `json:"-"`
}

func (m *ExchangeType) Reset()                    { *m = ExchangeType{} }
func (m *ExchangeType) String() string            { return proto.CompactTextString(m) }
func (*ExchangeType) ProtoMessage()               {}
func (*ExchangeType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

const Default_ExchangeType_WithdrawalCoinName string = "Bitcoin"

func (m *ExchangeType) GetSignedExchangeResponse() *SignedExchangeResponse {
	if m != nil {
		return m.SignedExchangeResponse
	}
	return nil
}

func (m *ExchangeType) GetWithdrawalCoinName() string {
	if m != nil && m.WithdrawalCoinName != nil {
		return *m.WithdrawalCoinName
	}
	return Default_ExchangeType_WithdrawalCoinName
}

func (m *ExchangeType) GetWithdrawalAddressN() []uint32 {
	if m != nil {
		return m.WithdrawalAddressN
	}
	return nil
}

func (m *ExchangeType) GetReturnAddressN() []uint32 {
	if m != nil {
		return m.ReturnAddressN
	}
	return nil
}

var E_WireIn = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50002,
	Name:          "wire_in",
	Tag:           "varint,50002,opt,name=wire_in,json=wireIn",
	Filename:      "types.proto",
}

var E_WireOut = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50003,
	Name:          "wire_out",
	Tag:           "varint,50003,opt,name=wire_out,json=wireOut",
	Filename:      "types.proto",
}

var E_WireDebugIn = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50004,
	Name:          "wire_debug_in",
	Tag:           "varint,50004,opt,name=wire_debug_in,json=wireDebugIn",
	Filename:      "types.proto",
}

var E_WireDebugOut = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50005,
	Name:          "wire_debug_out",
	Tag:           "varint,50005,opt,name=wire_debug_out,json=wireDebugOut",
	Filename:      "types.proto",
}

func init() {
	proto.RegisterType((*HDNodeType)(nil), "HDNodeType")
	proto.RegisterType((*HDNodePathType)(nil), "HDNodePathType")
	proto.RegisterType((*CoinType)(nil), "CoinType")
	proto.RegisterType((*MultisigRedeemScriptType)(nil), "MultisigRedeemScriptType")
	proto.RegisterType((*TxInputType)(nil), "TxInputType")
	proto.RegisterType((*TxOutputType)(nil), "TxOutputType")
	proto.RegisterType((*TxOutputBinType)(nil), "TxOutputBinType")
	proto.RegisterType((*TransactionType)(nil), "TransactionType")
	proto.RegisterType((*RawTransactionType)(nil), "RawTransactionType")
	proto.RegisterType((*TxRequestDetailsType)(nil), "TxRequestDetailsType")
	proto.RegisterType((*TxRequestSerializedType)(nil), "TxRequestSerializedType")
	proto.RegisterType((*IdentityType)(nil), "IdentityType")
	proto.RegisterType((*PolicyType)(nil), "PolicyType")
	proto.RegisterType((*ExchangeType)(nil), "ExchangeType")
	proto.RegisterEnum("FailureType", FailureType_name, FailureType_value)
	proto.RegisterEnum("OutputScriptType", OutputScriptType_name, OutputScriptType_value)
	proto.RegisterEnum("InputScriptType", InputScriptType_name, InputScriptType_value)
	proto.RegisterEnum("RequestType", RequestType_name, RequestType_value)
	proto.RegisterEnum("OutputAddressType", OutputAddressType_name, OutputAddressType_value)
	proto.RegisterEnum("ButtonRequestType", ButtonRequestType_name, ButtonRequestType_value)
	proto.RegisterEnum("PinMatrixRequestType", PinMatrixRequestType_name, PinMatrixRequestType_value)
	proto.RegisterExtension(E_WireIn)
	proto.RegisterExtension(E_WireOut)
	proto.RegisterExtension(E_WireDebugIn)
	proto.RegisterExtension(E_WireDebugOut)
}

func init() { proto.RegisterFile("types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x58, 0xdd, 0x6e, 0xdb, 0xca,
	0xf1, 0x3f, 0x94, 0x64, 0x4b, 0x1a, 0x49, 0xd6, 0x7a, 0xe3, 0x13, 0x33, 0xdf, 0x3e, 0x4a, 0x70,
	0xe2, 0xe3, 0xff, 0xbf, 0x3a, 0x39, 0x42, 0x72, 0x8a, 0x18, 0x45, 0x0b, 0xc5, 0x96, 0x63, 0x21,
	0x89, 0xac, 0xae, 0xe8, 0xc6, 0xbd, 0x22, 0x68, 0x72, 0x2d, 0x2d, 0x4c, 0x2d, 0x59, 0x72, 0x69,
	0x4b, 0xbd, 0x29, 0x7a, 0xd1, 0xf6, 0xaa, 0xaf, 0xd1, 0xb7, 0x28, 0xd0, 0x17, 0x28, 0x0a, 0xf4,
	0xe3, 0xa2, 0xef, 0xd0, 0x07, 0xe8, 0x65, 0xb1, 0xcb, 0xa5, 0x3e, 0x2c, 0xa7, 0xcd, 0x9d, 0xf6,
	0xf7, 0x9b, 0x99, 0x9d, 0x99, 0x9d, 0x99, 0x5d, 0x0a, 0x2a, 0x62, 0x1a, 0xd2, 0xb8, 0x19, 0x46,
	0x81, 0x08, 0xee, 0xef, 0x0c, 0x83, 0x60, 0xe8, 0xd3, 0x6f, 0xd5, 0xea, 0x3c, 0xb9, 0xf8, 0xd6,
	0xa3, 0xb1, 0x1b, 0xb1, 0x50, 0x04, 0x91, 0x96, 0xd8, 0xa0, 0x13, 0x77, 0xe4, 0xf0, 0x21, 0x4d,
	0xd7, 0x8d, 0x3f, 0x19, 0x00, 0xc7, 0x87, 0xbd, 0xc0, 0xa3, 0xd6, 0x34, 0xa4, 0x78, 0x0b, 0xd6,
	0x3c, 0x1a, 0x8a, 0x91, 0x69, 0xec, 0xe4, 0x76, 0x6b, 0x24, 0x5d, 0xe0, 0x1d, 0xa8, 0x5c, 0x30,
	0x3e, 0xa4, 0x51, 0x18, 0x31, 0x2e, 0xcc, 0x9c, 0xe2, 0x16, 0x21, 0xfc, 0x00, 0xca, 0xee, 0x88,
	0xf9, 0x9e, 0xcd, 0x93, 0xb1, 0x99, 0x57, 0x7c, 0x49, 0x01, 0xbd, 0x64, 0x8c, 0x1f, 0x01, 0xb8,
	0x23, 0x87, 0x71, 0xdb, 0x0d, 0x3c, 0x6a, 0x16, 0x76, 0x72, 0xbb, 0x55, 0x52, 0x56, 0xc8, 0x41,
	0xe0, 0x51, 0xfc, 0x04, 0x2a, 0x61, 0xc4, 0xae, 0x1c, 0x41, 0xed, 0x4b, 0x3a, 0x35, 0xd7, 0x76,
	0x8c, 0xdd, 0x2a, 0x01, 0x0d, 0xbd, 0xa3, 0x53, 0xa9, 0x1f, 0x26, 0xe7, 0x3e, 0x73, 0x15, 0xbf,
	0xae, 0xf8, 0x72, 0x8a, 0xbc, 0xa3, 0xd3, 0x46, 0x0f, 0x36, 0xd2, 0x08, 0xfa, 0x8e, 0x18, 0xa9,
	0x28, 0x9e, 0x40, 0x81, 0xcb, 0xad, 0x64, 0x10, 0x95, 0x56, 0xa5, 0x39, 0x0f, 0x90, 0x28, 0x42,
	0xba, 0xeb, 0x78, 0x5e, 0x44, 0xe3, 0xd8, 0xe6, 0x66, 0x6e, 0x27, 0x2f, 0xdd, 0xd5, 0x40, 0xaf,
	0xf1, 0xeb, 0x02, 0x94, 0x0e, 0x02, 0xc6, 0x95, 0x29, 0x19, 0x58, 0xc0, 0xb8, 0xcd, 0x9d, 0xb1,
	0xb4, 0x67, 0xec, 0x96, 0x49, 0x49, 0x02, 0x3d, 0x67, 0x4c, 0xf1, 0x53, 0xa8, 0x29, 0x32, 0x1e,
	0x05, 0x91, 0x70, 0x13, 0x99, 0x19, 0x29, 0x50, 0x95, 0xe0, 0x40, 0x63, 0xf8, 0x19, 0x54, 0xb3,
	0xbd, 0xe4, 0x51, 0x99, 0xf9, 0x1d, 0x63, 0xb7, 0xb6, 0x6f, 0xbc, 0x20, 0x15, 0x0d, 0x67, 0xfb,
	0x8c, 0x9d, 0xc9, 0x05, 0xa5, 0xf6, 0xe5, 0xb9, 0x59, 0xd8, 0x31, 0x76, 0x0b, 0xa4, 0x94, 0x02,
	0xef, 0xce, 0xf1, 0x0f, 0x60, 0x73, 0xd1, 0x84, 0x1d, 0xb6, 0xe2, 0x91, 0xca, 0x53, 0x6d, 0xdf,
	0x78, 0x45, 0xea, 0x0b, 0x76, 0xfa, 0xad, 0x78, 0x84, 0xbf, 0x83, 0x3b, 0x37, 0xc4, 0xaf, 0xc3,
	0xcb, 0x91, 0x4a, 0x5c, 0x6d, 0xdf, 0xf8, 0x9e, 0x6c, 0x2e, 0x29, 0x48, 0x0e, 0xbf, 0x00, 0x7c,
	0x53, 0x25, 0x1e, 0x99, 0x45, 0xa5, 0x91, 0xfb, 0xee, 0x05, 0x41, 0xcb, 0x2a, 0xf1, 0x08, 0xb7,
	0xe0, 0xcb, 0x98, 0x0d, 0x39, 0xf5, 0xec, 0x31, 0x8d, 0x63, 0x67, 0x48, 0xed, 0x11, 0x75, 0x3c,
	0x1a, 0x99, 0x25, 0x95, 0x83, 0x3b, 0x29, 0xf9, 0x21, 0xe5, 0x8e, 0x15, 0x85, 0xff, 0x1f, 0xf0,
	0x39, 0x0b, 0x5f, 0xbe, 0xb4, 0x1d, 0xd7, 0x0d, 0x12, 0x2e, 0xec, 0xd0, 0x11, 0x23, 0xb3, 0x2c,
	0x77, 0x21, 0x48, 0x31, 0xed, 0x94, 0x90, 0x27, 0x89, 0xef, 0xc2, 0xfa, 0x45, 0x10, 0x5d, 0x32,
	0xcf, 0xac, 0x2a, 0x09, 0xbd, 0xc2, 0xf7, 0xa1, 0xe4, 0x51, 0x97, 0x8d, 0x1d, 0x3f, 0x36, 0x6b,
	0x8a, 0x99, 0xad, 0xf1, 0x37, 0x80, 0xdc, 0x80, 0x8b, 0xc8, 0x71, 0x85, 0xad, 0x5d, 0x36, 0x37,
	0x54, 0xc1, 0xd4, 0x33, 0xbc, 0x9d, 0xc2, 0x32, 0xe3, 0x43, 0x27, 0xb6, 0x7d, 0x36, 0x66, 0xc2,
	0xac, 0x2b, 0x99, 0xd2, 0xd0, 0x89, 0xdf, 0xcb, 0x75, 0x23, 0x06, 0xf3, 0x43, 0xe2, 0x0b, 0x16,
	0xb3, 0x21, 0xa1, 0x1e, 0xa5, 0xe3, 0x81, 0x6a, 0x23, 0x75, 0x54, 0xdf, 0x40, 0x31, 0x4c, 0xce,
	0x2f, 0xe9, 0x34, 0x36, 0x8d, 0x9d, 0xfc, 0x6e, 0xa5, 0x55, 0x6f, 0x2e, 0xd7, 0x1f, 0xc9, 0x78,
	0xfc, 0x18, 0x40, 0xe6, 0xc1, 0x11, 0x49, 0x44, 0x63, 0x55, 0x68, 0x55, 0xb2, 0x80, 0xe0, 0x2a,
	0x18, 0xe3, 0xb4, 0x20, 0x88, 0x31, 0x6e, 0xfc, 0x31, 0x07, 0x15, 0x6b, 0xd2, 0xe5, 0x61, 0x22,
	0xb2, 0x9a, 0x98, 0x57, 0xa9, 0xb1, 0x5c, 0xa5, 0x92, 0x0c, 0x23, 0x7a, 0x65, 0x8f, 0x9c, 0x78,
	0xa4, 0x3a, 0xb2, 0x4a, 0x4a, 0x12, 0x38, 0x76, 0xe2, 0x91, 0xea, 0x18, 0x49, 0x32, 0xee, 0xd1,
	0x89, 0xee, 0x47, 0x25, 0xde, 0x95, 0x80, 0xa4, 0xd3, 0xb1, 0x60, 0xc7, 0x6c, 0xa8, 0xaa, 0xad,
	0x4a, 0xca, 0x29, 0x32, 0x60, 0x43, 0xfc, 0x35, 0x94, 0x62, 0xfa, 0x8b, 0x84, 0x72, 0x97, 0xea,
	0x2a, 0x83, 0x97, 0xad, 0xd7, 0x2f, 0x5f, 0x7f, 0xff, 0xc3, 0xd6, 0xeb, 0x57, 0x64, 0xc6, 0xe1,
	0x9f, 0x40, 0x45, 0x9b, 0x51, 0x85, 0x2d, 0xeb, 0x6b, 0xa3, 0x85, 0x9a, 0x2a, 0x80, 0x79, 0xbe,
	0xf6, 0xab, 0x83, 0x7e, 0xa7, 0x77, 0xd8, 0x3e, 0x3c, 0x24, 0x9d, 0xc1, 0x80, 0xe8, 0x9d, 0x55,
	0x80, 0xaf, 0xa0, 0x34, 0xd6, 0x59, 0x56, 0xb5, 0x56, 0x69, 0xdd, 0x6b, 0x7e, 0x2a, 0xed, 0x64,
	0x26, 0x2a, 0x0b, 0xc3, 0x19, 0xcb, 0x32, 0x51, 0xb5, 0x56, 0x20, 0x7a, 0xd5, 0xf8, 0x67, 0x0e,
	0xaa, 0xd6, 0xe4, 0x24, 0x11, 0x59, 0x02, 0x4d, 0x28, 0x66, 0x45, 0x90, 0xb6, 0x6e, 0xb6, 0xfc,
	0xaf, 0x03, 0x60, 0xc1, 0xbe, 0xcc, 0xdc, 0xcc, 0x3e, 0x6e, 0x2d, 0xc7, 0x2b, 0x07, 0xd9, 0x46,
	0x6b, 0xb3, 0x99, 0x6e, 0xb8, 0xe0, 0xe9, 0xa7, 0x42, 0x5c, 0xfb, 0xfc, 0x10, 0x9f, 0xc1, 0x46,
	0x10, 0xda, 0x11, 0x15, 0x49, 0xc4, 0x6d, 0xcf, 0x11, 0x8e, 0x1e, 0x7b, 0xd5, 0x20, 0x24, 0x0a,
	0x3c, 0x74, 0x84, 0x83, 0x5f, 0xdd, 0x18, 0x2d, 0x45, 0x75, 0x02, 0x58, 0x7b, 0xd4, 0x9e, 0xb7,
	0xec, 0xf2, 0xac, 0x69, 0x41, 0x2d, 0xbb, 0x05, 0x52, 0xbd, 0x92, 0x72, 0xac, 0xd6, 0xec, 0x68,
	0x54, 0xa9, 0x54, 0xe9, 0xc2, 0xaa, 0xd1, 0x83, 0x7a, 0x96, 0xda, 0x37, 0x7a, 0x34, 0xce, 0xd3,
	0x64, 0x2c, 0xa5, 0xe9, 0x29, 0xd4, 0x74, 0x9a, 0xd2, 0x36, 0xd0, 0xd5, 0x59, 0x4d, 0xc1, 0xbe,
	0xc2, 0x1a, 0x7f, 0xc9, 0x41, 0xdd, 0x8a, 0x1c, 0x1e, 0x3b, 0xae, 0x60, 0x01, 0xcf, 0x8e, 0xeb,
	0x8a, 0x46, 0x31, 0x0b, 0xb8, 0x3a, 0xae, 0x1a, 0xc9, 0x96, 0xf8, 0x19, 0xac, 0x33, 0x59, 0x55,
	0x69, 0x0f, 0x55, 0x5a, 0xd5, 0xe6, 0x42, 0x9f, 0x10, 0xcd, 0xe1, 0xef, 0xa0, 0x72, 0xce, 0xb8,
	0x1d, 0x28, 0x2f, 0x63, 0x33, 0xaf, 0x44, 0x51, 0xf3, 0x86, 0xdf, 0x04, 0xce, 0x19, 0x4f, 0x91,
	0x18, 0x3f, 0x87, 0x62, 0x26, 0xbe, 0xa6, 0xc4, 0x6b, 0xcd, 0xc5, 0x0a, 0x22, 0x19, 0x2b, 0x0b,
	0xc6, 0x0f, 0xdc, 0x4b, 0x5b, 0xb0, 0x31, 0x55, 0x1d, 0x53, 0x23, 0x25, 0x09, 0x58, 0x6c, 0x4c,
	0x65, 0x3f, 0xa5, 0x2e, 0xd8, 0x2e, 0x17, 0xe9, 0x9c, 0x25, 0xe5, 0x14, 0x39, 0xe0, 0x42, 0x5e,
	0x70, 0xda, 0x8c, 0xe2, 0xd5, 0x54, 0x25, 0xa0, 0x21, 0x29, 0xf0, 0x08, 0x80, 0x4e, 0x44, 0xe4,
	0xa4, 0x27, 0x5d, 0x4a, 0xfb, 0x51, 0x21, 0xea, 0x98, 0x9f, 0xc1, 0xc6, 0x9c, 0xb6, 0x7d, 0xca,
	0xf5, 0xc8, 0xac, 0xce, 0x44, 0xde, 0x53, 0xde, 0x68, 0x02, 0x26, 0xce, 0xf5, 0x2d, 0x39, 0x0d,
	0x9d, 0xa9, 0x1f, 0x38, 0x9e, 0x3a, 0xa5, 0x2a, 0xc9, 0x96, 0x8d, 0x3f, 0x18, 0xb0, 0x65, 0x4d,
	0x88, 0x6c, 0xe6, 0x58, 0x1c, 0x52, 0xe1, 0x30, 0x3f, 0x2d, 0x8f, 0xa7, 0x50, 0x8b, 0x52, 0x54,
	0xcf, 0x8f, 0xf4, 0x30, 0xaa, 0x1a, 0x4c, 0x47, 0xc8, 0x36, 0x14, 0xc5, 0x24, 0x1b, 0x3e, 0xd2,
	0xdf, 0x75, 0x31, 0x51, 0xa3, 0x67, 0xd5, 0xd9, 0xfc, 0xaa, 0xb3, 0x78, 0x0f, 0x36, 0x17, 0xa4,
	0x82, 0x8b, 0x8b, 0x98, 0x0a, 0x9d, 0xd6, 0xfa, 0x4c, 0xf0, 0x44, 0xc1, 0x8d, 0xdf, 0x18, 0xb0,
	0x3d, 0x73, 0x74, 0x40, 0x23, 0xe6, 0xf8, 0xec, 0x97, 0xd4, 0x53, 0xbe, 0x3e, 0x87, 0xfa, 0x6c,
	0x9c, 0x2e, 0x79, 0xbb, 0x31, 0x83, 0x53, 0x7f, 0x1f, 0x42, 0x79, 0x86, 0x68, 0x8f, 0xe7, 0x80,
	0x2a, 0xd9, 0x99, 0x61, 0x5b, 0x4c, 0x94, 0xcf, 0xb2, 0x64, 0xe7, 0xbb, 0x4d, 0x1a, 0xbf, 0x37,
	0xa0, 0xda, 0xf5, 0x28, 0x17, 0x4c, 0x4c, 0xb3, 0xc7, 0x92, 0x7a, 0x44, 0xe9, 0xe1, 0x92, 0x2e,
	0x30, 0x86, 0x42, 0x12, 0xd3, 0x48, 0xbf, 0x05, 0xd4, 0x6f, 0x89, 0x8d, 0x82, 0x58, 0x28, 0xb3,
	0x65, 0xa2, 0x7e, 0x4b, 0x2c, 0x0c, 0xa2, 0x34, 0xea, 0x32, 0x51, 0xbf, 0x15, 0x26, 0xaf, 0xc4,
	0x35, 0x8d, 0xc9, 0x6b, 0x70, 0x1b, 0xd6, 0xd2, 0xc0, 0xd6, 0xb3, 0x87, 0x43, 0xba, 0x6e, 0xbc,
	0x05, 0xe8, 0x07, 0x3e, 0x73, 0xa7, 0xfa, 0xcd, 0x53, 0x09, 0xd5, 0x6a, 0xf1, 0xa9, 0x02, 0x29,
	0xa4, 0x1e, 0x2b, 0x26, 0x14, 0x29, 0x77, 0xce, 0x7d, 0xea, 0x29, 0xd7, 0x4a, 0x24, 0x5b, 0x36,
	0xfe, 0x6d, 0x40, 0x75, 0xb1, 0xf5, 0xf1, 0x4f, 0xc1, 0xd4, 0x77, 0xfb, 0x6c, 0x4e, 0x44, 0x34,
	0x0e, 0x03, 0x1e, 0xa7, 0x86, 0x2b, 0xad, 0xed, 0xe6, 0x40, 0x09, 0x64, 0x6a, 0x44, 0xd3, 0xe4,
	0x6e, 0x7c, 0x2b, 0x8e, 0x5f, 0xc3, 0xd6, 0x35, 0x13, 0x23, 0x2f, 0x72, 0xae, 0x1d, 0xdf, 0x9e,
	0x3f, 0xa9, 0x54, 0x96, 0xf6, 0x8b, 0x6f, 0x98, 0x90, 0x18, 0xc1, 0x73, 0xa1, 0x83, 0xec, 0x95,
	0xf5, 0x62, 0x49, 0x75, 0x3e, 0xb6, 0xf3, 0x6a, 0x6c, 0x2f, 0x68, 0xb4, 0xb3, 0x01, 0xbe, 0x0b,
	0x48, 0x8f, 0xce, 0xb9, 0x74, 0x41, 0x49, 0x6f, 0xa4, 0x78, 0x26, 0xb9, 0xf7, 0xe7, 0x1c, 0x54,
	0x8e, 0x1c, 0xe6, 0x27, 0x51, 0x1a, 0xf9, 0x23, 0xb8, 0xa7, 0x97, 0xf6, 0x29, 0xa7, 0x93, 0x90,
	0xba, 0x62, 0xf6, 0x88, 0x41, 0x06, 0xbe, 0x0f, 0x77, 0x33, 0xfa, 0x4d, 0x22, 0x44, 0xc0, 0x3b,
	0x5a, 0x04, 0xe5, 0xf0, 0x36, 0xdc, 0xc9, 0xb8, 0xc1, 0x94, 0x0b, 0x67, 0xd2, 0x89, 0xa2, 0x20,
	0x42, 0x79, 0xfc, 0x00, 0xb6, 0x33, 0xa2, 0xad, 0x1a, 0xf3, 0xc0, 0xe1, 0x2e, 0xf5, 0x7d, 0xea,
	0xa1, 0xc2, 0xa2, 0x56, 0x9f, 0xcd, 0xcd, 0xad, 0x61, 0x13, 0xb6, 0x16, 0x88, 0xb9, 0xca, 0x3a,
	0xbe, 0x0b, 0x78, 0x81, 0xe9, 0xf2, 0x2b, 0xc7, 0x67, 0x1e, 0x2a, 0xe2, 0x87, 0x60, 0x66, 0xb8,
	0x06, 0x07, 0x59, 0x81, 0xa3, 0x12, 0xde, 0x84, 0x5a, 0xc6, 0x9e, 0x88, 0x11, 0x8d, 0x50, 0x79,
	0x31, 0x9a, 0x5e, 0x20, 0x3a, 0x3c, 0x48, 0x86, 0xa3, 0xa3, 0x84, 0x7b, 0x31, 0x82, 0x1b, 0x5c,
	0x97, 0x33, 0xa1, 0x1b, 0x01, 0x55, 0xf0, 0x3d, 0xf8, 0x32, 0xe3, 0x8e, 0x58, 0x34, 0xbe, 0x76,
	0x22, 0x9a, 0xc6, 0xea, 0xee, 0xfd, 0xce, 0x00, 0x74, 0xf3, 0x3e, 0xc4, 0x08, 0xaa, 0xfd, 0xf6,
	0xcf, 0xad, 0x13, 0xfd, 0x04, 0x40, 0x5f, 0xe0, 0x3b, 0x50, 0x57, 0xc8, 0xe0, 0x80, 0x74, 0xfb,
	0xd6, 0x71, 0x7b, 0x70, 0x8c, 0x0c, 0xe9, 0xa1, 0x02, 0x3f, 0x9c, 0xbe, 0xb7, 0xba, 0x83, 0xee,
	0x5b, 0x94, 0x9b, 0x41, 0x27, 0x7d, 0xd2, 0xb1, 0x4e, 0x49, 0x0f, 0xe5, 0x67, 0xc6, 0x3e, 0x76,
	0xad, 0x9e, 0x34, 0x56, 0xc0, 0x5b, 0x80, 0x14, 0xd2, 0x6f, 0x0d, 0x8e, 0x33, 0x74, 0x6d, 0xcf,
	0x87, 0xfa, 0x8d, 0x87, 0x88, 0x54, 0x5d, 0x7c, 0x8a, 0xa0, 0x2f, 0xa4, 0x7d, 0x85, 0xcc, 0xb6,
	0x34, 0x70, 0x15, 0x4a, 0x9d, 0x33, 0xab, 0x43, 0x7a, 0xed, 0xf7, 0x28, 0x37, 0x53, 0xc9, 0xec,
	0xe6, 0xe5, 0x6e, 0x0a, 0x59, 0xdc, 0xad, 0xb0, 0x77, 0x0a, 0x15, 0x3d, 0xa0, 0xd4, 0x4e, 0x15,
	0x28, 0x5a, 0x67, 0xdd, 0x5e, 0xff, 0xd4, 0x42, 0x5f, 0x48, 0x8b, 0xd6, 0xd9, 0xc9, 0xa9, 0x25,
	0x57, 0x06, 0x06, 0x58, 0xb7, 0xce, 0x3e, 0x74, 0xac, 0x36, 0xca, 0xe1, 0x0d, 0x00, 0xeb, 0xec,
	0xa8, 0xdb, 0xeb, 0x0e, 0x8e, 0x3b, 0x87, 0x28, 0x8f, 0xeb, 0x50, 0xb1, 0xce, 0x3a, 0x67, 0x16,
	0x69, 0x1f, 0xb6, 0xad, 0x36, 0x2a, 0xec, 0x1d, 0xc1, 0xe6, 0xca, 0x5d, 0x8e, 0xcb, 0xb0, 0xa6,
	0x3c, 0xd0, 0xa6, 0x49, 0xbb, 0x37, 0x38, 0xea, 0x90, 0xd4, 0xf4, 0xc1, 0x71, 0xbb, 0xf7, 0xb6,
	0x83, 0x72, 0x69, 0x18, 0x7a, 0x95, 0xdf, 0xfb, 0x57, 0x11, 0x36, 0xd3, 0x82, 0x5d, 0xf4, 0x72,
	0x1b, 0xee, 0x2c, 0x81, 0xba, 0x30, 0x0c, 0xdc, 0x80, 0xc7, 0xcb, 0xc4, 0x11, 0xa5, 0x27, 0x57,
	0x34, 0xb2, 0x46, 0x11, 0x8d, 0x47, 0x81, 0x2f, 0xcb, 0xfd, 0x09, 0x3c, 0x58, 0x96, 0x39, 0x08,
	0xf8, 0x05, 0x8b, 0xc6, 0xa9, 0xbf, 0x28, 0x2f, 0x5b, 0x69, 0x59, 0x80, 0xd0, 0x98, 0x8a, 0x43,
	0x7a, 0xc5, 0x5c, 0x8a, 0x0a, 0xab, 0xb4, 0xd6, 0xff, 0x18, 0x44, 0xb2, 0xfc, 0x1f, 0x82, 0xb9,
	0x4c, 0x7f, 0x64, 0x21, 0xd5, 0xca, 0xeb, 0xab, 0xca, 0xfd, 0x28, 0x10, 0xd4, 0x15, 0x07, 0x8e,
	0xef, 0xa3, 0xa2, 0xec, 0x9d, 0x65, 0x5a, 0x36, 0x82, 0x35, 0x41, 0xa5, 0x55, 0xaf, 0xb3, 0x02,
	0x3e, 0x18, 0x51, 0xf7, 0x12, 0x95, 0x65, 0x6d, 0x2f, 0x0b, 0xe8, 0xcc, 0x23, 0xf8, 0xb4, 0x6e,
	0x27, 0x72, 0x62, 0x8a, 0x2a, 0x78, 0x0f, 0xbe, 0xbe, 0x35, 0x24, 0x75, 0x27, 0x5f, 0xd0, 0xc8,
	0x0a, 0xf4, 0xe7, 0x0d, 0xaa, 0xe2, 0xff, 0x83, 0xe7, 0xff, 0x43, 0x36, 0xfb, 0xa2, 0x40, 0xb5,
	0x5b, 0x72, 0xa5, 0x86, 0xeb, 0x7b, 0xe7, 0x9c, 0xfa, 0x68, 0x03, 0xef, 0xc0, 0xc3, 0xdb, 0x69,
	0x3e, 0x4c, 0xe4, 0xdc, 0xaa, 0xaf, 0x1e, 0x68, 0x47, 0x8d, 0xfe, 0xbe, 0x13, 0xc7, 0xe1, 0x48,
	0x79, 0x8f, 0xf0, 0x53, 0x78, 0xb2, 0x2c, 0x73, 0xc8, 0xe2, 0x1b, 0x42, 0x9b, 0xf8, 0x39, 0x3c,
	0xbd, 0x69, 0xc8, 0x8d, 0xa6, 0xa1, 0x68, 0x73, 0x35, 0x6c, 0xb2, 0x49, 0x89, 0x57, 0x7d, 0xd2,
	0x82, 0x99, 0xc4, 0x9d, 0x55, 0x9f, 0xba, 0x63, 0x79, 0x07, 0xf6, 0x67, 0xdf, 0xfd, 0x68, 0x0b,
	0xef, 0xc2, 0xb3, 0xdb, 0x64, 0x08, 0x75, 0x83, 0x2b, 0x1a, 0x4d, 0x07, 0x94, 0x0b, 0xf9, 0x25,
	0x82, 0xbe, 0xc4, 0x8f, 0xe1, 0xfe, 0xea, 0x91, 0x67, 0xb7, 0x35, 0xba, 0x2b, 0x87, 0xe6, 0x8d,
	0x8a, 0x61, 0x7c, 0x88, 0xb6, 0xe5, 0x70, 0xbe, 0x59, 0xa5, 0xe3, 0xe0, 0x8a, 0xf6, 0x19, 0x47,
	0xe6, 0x2a, 0x99, 0x26, 0x56, 0x92, 0xf7, 0x6e, 0x21, 0x23, 0xea, 0x08, 0x45, 0xde, 0x5f, 0x2d,
	0xdf, 0xb7, 0x54, 0x74, 0xb8, 0x88, 0x82, 0x70, 0x8a, 0x1e, 0xac, 0x9e, 0xe7, 0x62, 0xee, 0x1e,
	0xae, 0x16, 0x5a, 0x3b, 0x0c, 0xfd, 0xa9, 0xba, 0xeb, 0x19, 0x8d, 0xd1, 0xa3, 0xdb, 0x83, 0xcd,
	0xae, 0x5c, 0xf4, 0x78, 0xef, 0x57, 0xb0, 0xd5, 0x67, 0xfc, 0x83, 0x23, 0x22, 0x36, 0x59, 0x6c,
	0xf8, 0x1d, 0x78, 0x78, 0x1b, 0x6e, 0x1f, 0x24, 0x51, 0x44, 0xb9, 0x40, 0x06, 0xfe, 0x0a, 0x1e,
	0xdd, 0x2a, 0xd1, 0xa3, 0xd7, 0x47, 0x2c, 0x8a, 0x05, 0xca, 0xc9, 0x73, 0xfb, 0x94, 0xc8, 0x80,
	0xba, 0x01, 0xf7, 0x50, 0x7e, 0xff, 0x47, 0x50, 0xbc, 0x66, 0xea, 0x45, 0x86, 0xbf, 0x6a, 0xa6,
	0xff, 0x49, 0x35, 0xb3, 0xff, 0xa4, 0x9a, 0x1d, 0x9e, 0x8c, 0x7f, 0xe6, 0xf8, 0x09, 0x3d, 0x09,
	0xe5, 0x6d, 0x18, 0x9b, 0x7f, 0xfd, 0x6d, 0x5e, 0x3d, 0x48, 0xd6, 0xa5, 0x4e, 0x97, 0xef, 0xff,
	0x18, 0x4a, 0x4a, 0x3b, 0x48, 0xc4, 0xe7, 0xa8, 0xff, 0x4d, 0xab, 0xab, 0x2d, 0x4f, 0x12, 0xb1,
	0xff, 0x16, 0x6a, 0x4a, 0xdf, 0xa3, 0xe7, 0xc9, 0xf0, 0x33, 0x7d, 0xf8, 0xbb, 0x36, 0x52, 0x91,
	0x9a, 0x87, 0x52, 0xb1, 0xcb, 0xf7, 0xbb, 0xb0, 0xb1, 0x60, 0xe8, 0x33, 0xdd, 0xf9, 0x87, 0xb6,
	0x54, 0x9d, 0x59, 0x3a, 0x49, 0xc4, 0x9b, 0x6f, 0xe0, 0xbe, 0x1b, 0x8c, 0x9b, 0x97, 0x94, 0x86,
	0x97, 0x74, 0xda, 0xf4, 0xd4, 0x24, 0x53, 0x46, 0xdc, 0xc0, 0x7f, 0x53, 0x79, 0x47, 0x69, 0xf8,
	0x8e, 0xaa, 0x97, 0xdc, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x97, 0x10, 0x52, 0xd2, 0x13,
	0x00, 0x00,
}
