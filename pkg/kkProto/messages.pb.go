// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages.proto

package kkProto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
// Mapping between KeepKey wire identifier (uint) and a protobuf message
type MessageType int32

const (
	MessageType_MessageType_Initialize                 MessageType = 0
	MessageType_MessageType_Ping                       MessageType = 1
	MessageType_MessageType_Success                    MessageType = 2
	MessageType_MessageType_Failure                    MessageType = 3
	MessageType_MessageType_ChangePin                  MessageType = 4
	MessageType_MessageType_WipeDevice                 MessageType = 5
	MessageType_MessageType_FirmwareErase              MessageType = 6
	MessageType_MessageType_FirmwareUpload             MessageType = 7
	MessageType_MessageType_GetEntropy                 MessageType = 9
	MessageType_MessageType_Entropy                    MessageType = 10
	MessageType_MessageType_GetPublicKey               MessageType = 11
	MessageType_MessageType_PublicKey                  MessageType = 12
	MessageType_MessageType_LoadDevice                 MessageType = 13
	MessageType_MessageType_ResetDevice                MessageType = 14
	MessageType_MessageType_SignTx                     MessageType = 15
	MessageType_MessageType_SimpleSignTx               MessageType = 16
	MessageType_MessageType_Features                   MessageType = 17
	MessageType_MessageType_PinMatrixRequest           MessageType = 18
	MessageType_MessageType_PinMatrixAck               MessageType = 19
	MessageType_MessageType_Cancel                     MessageType = 20
	MessageType_MessageType_TxRequest                  MessageType = 21
	MessageType_MessageType_TxAck                      MessageType = 22
	MessageType_MessageType_CipherKeyValue             MessageType = 23
	MessageType_MessageType_ClearSession               MessageType = 24
	MessageType_MessageType_ApplySettings              MessageType = 25
	MessageType_MessageType_ButtonRequest              MessageType = 26
	MessageType_MessageType_ButtonAck                  MessageType = 27
	MessageType_MessageType_GetAddress                 MessageType = 29
	MessageType_MessageType_Address                    MessageType = 30
	MessageType_MessageType_EntropyRequest             MessageType = 35
	MessageType_MessageType_EntropyAck                 MessageType = 36
	MessageType_MessageType_SignMessage                MessageType = 38
	MessageType_MessageType_VerifyMessage              MessageType = 39
	MessageType_MessageType_MessageSignature           MessageType = 40
	MessageType_MessageType_PassphraseRequest          MessageType = 41
	MessageType_MessageType_PassphraseAck              MessageType = 42
	MessageType_MessageType_EstimateTxSize             MessageType = 43
	MessageType_MessageType_TxSize                     MessageType = 44
	MessageType_MessageType_RecoveryDevice             MessageType = 45
	MessageType_MessageType_WordRequest                MessageType = 46
	MessageType_MessageType_WordAck                    MessageType = 47
	MessageType_MessageType_CipheredKeyValue           MessageType = 48
	MessageType_MessageType_EncryptMessage             MessageType = 49
	MessageType_MessageType_EncryptedMessage           MessageType = 50
	MessageType_MessageType_DecryptMessage             MessageType = 51
	MessageType_MessageType_DecryptedMessage           MessageType = 52
	MessageType_MessageType_SignIdentity               MessageType = 53
	MessageType_MessageType_SignedIdentity             MessageType = 54
	MessageType_MessageType_GetFeatures                MessageType = 55
	MessageType_MessageType_EthereumGetAddress         MessageType = 56
	MessageType_MessageType_EthereumAddress            MessageType = 57
	MessageType_MessageType_EthereumSignTx             MessageType = 58
	MessageType_MessageType_EthereumTxRequest          MessageType = 59
	MessageType_MessageType_EthereumTxAck              MessageType = 60
	MessageType_MessageType_CharacterRequest           MessageType = 80
	MessageType_MessageType_CharacterAck               MessageType = 81
	MessageType_MessageType_RawTxAck                   MessageType = 82
	MessageType_MessageType_ApplyPolicies              MessageType = 83
	MessageType_MessageType_FlashHash                  MessageType = 84
	MessageType_MessageType_FlashWrite                 MessageType = 85
	MessageType_MessageType_FlashHashResponse          MessageType = 86
	MessageType_MessageType_DebugLinkFlashDump         MessageType = 87
	MessageType_MessageType_DebugLinkFlashDumpResponse MessageType = 88
	MessageType_MessageType_SoftReset                  MessageType = 89
	MessageType_MessageType_DebugLinkDecision          MessageType = 100
	MessageType_MessageType_DebugLinkGetState          MessageType = 101
	MessageType_MessageType_DebugLinkState             MessageType = 102
	MessageType_MessageType_DebugLinkStop              MessageType = 103
	MessageType_MessageType_DebugLinkLog               MessageType = 104
	MessageType_MessageType_DebugLinkFillConfig        MessageType = 105
	MessageType_MessageType_DebugLinkScreenDump        MessageType = 106
)

var MessageType_name = map[int32]string{
	0:   "MessageType_Initialize",
	1:   "MessageType_Ping",
	2:   "MessageType_Success",
	3:   "MessageType_Failure",
	4:   "MessageType_ChangePin",
	5:   "MessageType_WipeDevice",
	6:   "MessageType_FirmwareErase",
	7:   "MessageType_FirmwareUpload",
	9:   "MessageType_GetEntropy",
	10:  "MessageType_Entropy",
	11:  "MessageType_GetPublicKey",
	12:  "MessageType_PublicKey",
	13:  "MessageType_LoadDevice",
	14:  "MessageType_ResetDevice",
	15:  "MessageType_SignTx",
	16:  "MessageType_SimpleSignTx",
	17:  "MessageType_Features",
	18:  "MessageType_PinMatrixRequest",
	19:  "MessageType_PinMatrixAck",
	20:  "MessageType_Cancel",
	21:  "MessageType_TxRequest",
	22:  "MessageType_TxAck",
	23:  "MessageType_CipherKeyValue",
	24:  "MessageType_ClearSession",
	25:  "MessageType_ApplySettings",
	26:  "MessageType_ButtonRequest",
	27:  "MessageType_ButtonAck",
	29:  "MessageType_GetAddress",
	30:  "MessageType_Address",
	35:  "MessageType_EntropyRequest",
	36:  "MessageType_EntropyAck",
	38:  "MessageType_SignMessage",
	39:  "MessageType_VerifyMessage",
	40:  "MessageType_MessageSignature",
	41:  "MessageType_PassphraseRequest",
	42:  "MessageType_PassphraseAck",
	43:  "MessageType_EstimateTxSize",
	44:  "MessageType_TxSize",
	45:  "MessageType_RecoveryDevice",
	46:  "MessageType_WordRequest",
	47:  "MessageType_WordAck",
	48:  "MessageType_CipheredKeyValue",
	49:  "MessageType_EncryptMessage",
	50:  "MessageType_EncryptedMessage",
	51:  "MessageType_DecryptMessage",
	52:  "MessageType_DecryptedMessage",
	53:  "MessageType_SignIdentity",
	54:  "MessageType_SignedIdentity",
	55:  "MessageType_GetFeatures",
	56:  "MessageType_EthereumGetAddress",
	57:  "MessageType_EthereumAddress",
	58:  "MessageType_EthereumSignTx",
	59:  "MessageType_EthereumTxRequest",
	60:  "MessageType_EthereumTxAck",
	80:  "MessageType_CharacterRequest",
	81:  "MessageType_CharacterAck",
	82:  "MessageType_RawTxAck",
	83:  "MessageType_ApplyPolicies",
	84:  "MessageType_FlashHash",
	85:  "MessageType_FlashWrite",
	86:  "MessageType_FlashHashResponse",
	87:  "MessageType_DebugLinkFlashDump",
	88:  "MessageType_DebugLinkFlashDumpResponse",
	89:  "MessageType_SoftReset",
	100: "MessageType_DebugLinkDecision",
	101: "MessageType_DebugLinkGetState",
	102: "MessageType_DebugLinkState",
	103: "MessageType_DebugLinkStop",
	104: "MessageType_DebugLinkLog",
	105: "MessageType_DebugLinkFillConfig",
	106: "MessageType_DebugLinkScreenDump",
}
var MessageType_value = map[string]int32{
	"MessageType_Initialize":                 0,
	"MessageType_Ping":                       1,
	"MessageType_Success":                    2,
	"MessageType_Failure":                    3,
	"MessageType_ChangePin":                  4,
	"MessageType_WipeDevice":                 5,
	"MessageType_FirmwareErase":              6,
	"MessageType_FirmwareUpload":             7,
	"MessageType_GetEntropy":                 9,
	"MessageType_Entropy":                    10,
	"MessageType_GetPublicKey":               11,
	"MessageType_PublicKey":                  12,
	"MessageType_LoadDevice":                 13,
	"MessageType_ResetDevice":                14,
	"MessageType_SignTx":                     15,
	"MessageType_SimpleSignTx":               16,
	"MessageType_Features":                   17,
	"MessageType_PinMatrixRequest":           18,
	"MessageType_PinMatrixAck":               19,
	"MessageType_Cancel":                     20,
	"MessageType_TxRequest":                  21,
	"MessageType_TxAck":                      22,
	"MessageType_CipherKeyValue":             23,
	"MessageType_ClearSession":               24,
	"MessageType_ApplySettings":              25,
	"MessageType_ButtonRequest":              26,
	"MessageType_ButtonAck":                  27,
	"MessageType_GetAddress":                 29,
	"MessageType_Address":                    30,
	"MessageType_EntropyRequest":             35,
	"MessageType_EntropyAck":                 36,
	"MessageType_SignMessage":                38,
	"MessageType_VerifyMessage":              39,
	"MessageType_MessageSignature":           40,
	"MessageType_PassphraseRequest":          41,
	"MessageType_PassphraseAck":              42,
	"MessageType_EstimateTxSize":             43,
	"MessageType_TxSize":                     44,
	"MessageType_RecoveryDevice":             45,
	"MessageType_WordRequest":                46,
	"MessageType_WordAck":                    47,
	"MessageType_CipheredKeyValue":           48,
	"MessageType_EncryptMessage":             49,
	"MessageType_EncryptedMessage":           50,
	"MessageType_DecryptMessage":             51,
	"MessageType_DecryptedMessage":           52,
	"MessageType_SignIdentity":               53,
	"MessageType_SignedIdentity":             54,
	"MessageType_GetFeatures":                55,
	"MessageType_EthereumGetAddress":         56,
	"MessageType_EthereumAddress":            57,
	"MessageType_EthereumSignTx":             58,
	"MessageType_EthereumTxRequest":          59,
	"MessageType_EthereumTxAck":              60,
	"MessageType_CharacterRequest":           80,
	"MessageType_CharacterAck":               81,
	"MessageType_RawTxAck":                   82,
	"MessageType_ApplyPolicies":              83,
	"MessageType_FlashHash":                  84,
	"MessageType_FlashWrite":                 85,
	"MessageType_FlashHashResponse":          86,
	"MessageType_DebugLinkFlashDump":         87,
	"MessageType_DebugLinkFlashDumpResponse": 88,
	"MessageType_SoftReset":                  89,
	"MessageType_DebugLinkDecision":          100,
	"MessageType_DebugLinkGetState":          101,
	"MessageType_DebugLinkState":             102,
	"MessageType_DebugLinkStop":              103,
	"MessageType_DebugLinkLog":               104,
	"MessageType_DebugLinkFillConfig":        105,
	"MessageType_DebugLinkScreenDump":        106,
}

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}
func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (x *MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageType_value, data, "MessageType")
	if err != nil {
		return err
	}
	*x = MessageType(value)
	return nil
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// *
// Request: Reset device to default state and ask for device details
// @next Features
type Initialize struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Initialize) Reset()                    { *m = Initialize{} }
func (m *Initialize) String() string            { return proto.CompactTextString(m) }
func (*Initialize) ProtoMessage()               {}
func (*Initialize) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// *
// Request: Ask for device details (no device reset)
// @next Features
type GetFeatures struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetFeatures) Reset()                    { *m = GetFeatures{} }
func (m *GetFeatures) String() string            { return proto.CompactTextString(m) }
func (*GetFeatures) ProtoMessage()               {}
func (*GetFeatures) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

// *
// Response: Reports various information about the device
// @prev Initialize
// @prev GetFeatures
type Features struct {
	Vendor               *string       `protobuf:"bytes,1,opt,name=vendor" json:"vendor,omitempty"`
	MajorVersion         *uint32       `protobuf:"varint,2,opt,name=major_version,json=majorVersion" json:"major_version,omitempty"`
	MinorVersion         *uint32       `protobuf:"varint,3,opt,name=minor_version,json=minorVersion" json:"minor_version,omitempty"`
	PatchVersion         *uint32       `protobuf:"varint,4,opt,name=patch_version,json=patchVersion" json:"patch_version,omitempty"`
	BootloaderMode       *bool         `protobuf:"varint,5,opt,name=bootloader_mode,json=bootloaderMode" json:"bootloader_mode,omitempty"`
	DeviceId             *string       `protobuf:"bytes,6,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	PinProtection        *bool         `protobuf:"varint,7,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`
	PassphraseProtection *bool         `protobuf:"varint,8,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	Language             *string       `protobuf:"bytes,9,opt,name=language" json:"language,omitempty"`
	Label                *string       `protobuf:"bytes,10,opt,name=label" json:"label,omitempty"`
	Coins                []*CoinType   `protobuf:"bytes,11,rep,name=coins" json:"coins,omitempty"`
	Initialized          *bool         `protobuf:"varint,12,opt,name=initialized" json:"initialized,omitempty"`
	Revision             []byte        `protobuf:"bytes,13,opt,name=revision" json:"revision,omitempty"`
	BootloaderHash       []byte        `protobuf:"bytes,14,opt,name=bootloader_hash,json=bootloaderHash" json:"bootloader_hash,omitempty"`
	Imported             *bool         `protobuf:"varint,15,opt,name=imported" json:"imported,omitempty"`
	PinCached            *bool         `protobuf:"varint,16,opt,name=pin_cached,json=pinCached" json:"pin_cached,omitempty"`
	PassphraseCached     *bool         `protobuf:"varint,17,opt,name=passphrase_cached,json=passphraseCached" json:"passphrase_cached,omitempty"`
	Policies             []*PolicyType `protobuf:"bytes,18,rep,name=policies" json:"policies,omitempty"`
	Model                []byte        `protobuf:"bytes,21,opt,name=model" json:"model,omitempty"`
	FirmwareVariant      *string       `protobuf:"bytes,22,opt,name=firmware_variant,json=firmwareVariant" json:"firmware_variant,omitempty"`
	FirmwareHash         []byte        `protobuf:"bytes,23,opt,name=firmware_hash,json=firmwareHash" json:"firmware_hash,omitempty"`
	XXX_unrecognized     []byte        `json:"-"`
}

func (m *Features) Reset()                    { *m = Features{} }
func (m *Features) String() string            { return proto.CompactTextString(m) }
func (*Features) ProtoMessage()               {}
func (*Features) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Features) GetVendor() string {
	if m != nil && m.Vendor != nil {
		return *m.Vendor
	}
	return ""
}

func (m *Features) GetMajorVersion() uint32 {
	if m != nil && m.MajorVersion != nil {
		return *m.MajorVersion
	}
	return 0
}

func (m *Features) GetMinorVersion() uint32 {
	if m != nil && m.MinorVersion != nil {
		return *m.MinorVersion
	}
	return 0
}

func (m *Features) GetPatchVersion() uint32 {
	if m != nil && m.PatchVersion != nil {
		return *m.PatchVersion
	}
	return 0
}

func (m *Features) GetBootloaderMode() bool {
	if m != nil && m.BootloaderMode != nil {
		return *m.BootloaderMode
	}
	return false
}

func (m *Features) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *Features) GetPinProtection() bool {
	if m != nil && m.PinProtection != nil {
		return *m.PinProtection
	}
	return false
}

func (m *Features) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *Features) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *Features) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *Features) GetCoins() []*CoinType {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *Features) GetInitialized() bool {
	if m != nil && m.Initialized != nil {
		return *m.Initialized
	}
	return false
}

func (m *Features) GetRevision() []byte {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *Features) GetBootloaderHash() []byte {
	if m != nil {
		return m.BootloaderHash
	}
	return nil
}

func (m *Features) GetImported() bool {
	if m != nil && m.Imported != nil {
		return *m.Imported
	}
	return false
}

func (m *Features) GetPinCached() bool {
	if m != nil && m.PinCached != nil {
		return *m.PinCached
	}
	return false
}

func (m *Features) GetPassphraseCached() bool {
	if m != nil && m.PassphraseCached != nil {
		return *m.PassphraseCached
	}
	return false
}

func (m *Features) GetPolicies() []*PolicyType {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *Features) GetModel() []byte {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *Features) GetFirmwareVariant() string {
	if m != nil && m.FirmwareVariant != nil {
		return *m.FirmwareVariant
	}
	return ""
}

func (m *Features) GetFirmwareHash() []byte {
	if m != nil {
		return m.FirmwareHash
	}
	return nil
}

// *
// Request: clear session (removes cached PIN, passphrase, etc).
// @next Success
type ClearSession struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ClearSession) Reset()                    { *m = ClearSession{} }
func (m *ClearSession) String() string            { return proto.CompactTextString(m) }
func (*ClearSession) ProtoMessage()               {}
func (*ClearSession) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

// *
// Request: change language and/or label of the device
// @next Success
// @next Failure
// @next ButtonRequest
// @next PinMatrixRequest
type ApplySettings struct {
	Language         *string `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Label            *string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	UsePassphrase    *bool   `protobuf:"varint,3,opt,name=use_passphrase,json=usePassphrase" json:"use_passphrase,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ApplySettings) Reset()                    { *m = ApplySettings{} }
func (m *ApplySettings) String() string            { return proto.CompactTextString(m) }
func (*ApplySettings) ProtoMessage()               {}
func (*ApplySettings) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *ApplySettings) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *ApplySettings) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *ApplySettings) GetUsePassphrase() bool {
	if m != nil && m.UsePassphrase != nil {
		return *m.UsePassphrase
	}
	return false
}

// *
// Request: Starts workflow for setting/changing/removing the PIN
// @next ButtonRequest
// @next PinMatrixRequest
type ChangePin struct {
	Remove           *bool  `protobuf:"varint,1,opt,name=remove" json:"remove,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChangePin) Reset()                    { *m = ChangePin{} }
func (m *ChangePin) String() string            { return proto.CompactTextString(m) }
func (*ChangePin) ProtoMessage()               {}
func (*ChangePin) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *ChangePin) GetRemove() bool {
	if m != nil && m.Remove != nil {
		return *m.Remove
	}
	return false
}

// *
// Request: Test if the device is alive, device sends back the message in Success response
// @next Success
type Ping struct {
	Message              *string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	ButtonProtection     *bool   `protobuf:"varint,2,opt,name=button_protection,json=buttonProtection" json:"button_protection,omitempty"`
	PinProtection        *bool   `protobuf:"varint,3,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`
	PassphraseProtection *bool   `protobuf:"varint,4,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *Ping) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *Ping) GetButtonProtection() bool {
	if m != nil && m.ButtonProtection != nil {
		return *m.ButtonProtection
	}
	return false
}

func (m *Ping) GetPinProtection() bool {
	if m != nil && m.PinProtection != nil {
		return *m.PinProtection
	}
	return false
}

func (m *Ping) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

// *
// Response: Success of the previous request
type Success struct {
	Message          *string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Success) Reset()                    { *m = Success{} }
func (m *Success) String() string            { return proto.CompactTextString(m) }
func (*Success) ProtoMessage()               {}
func (*Success) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *Success) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// *
// Response: Failure of the previous request
type Failure struct {
	Code             *FailureType `protobuf:"varint,1,opt,name=code,enum=FailureType" json:"code,omitempty"`
	Message          *string      `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Failure) Reset()                    { *m = Failure{} }
func (m *Failure) String() string            { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()               {}
func (*Failure) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *Failure) GetCode() FailureType {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return FailureType_Failure_UnexpectedMessage
}

func (m *Failure) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// *
// Response: Device is waiting for HW button press.
// @next ButtonAck
// @next Cancel
type ButtonRequest struct {
	Code             *ButtonRequestType `protobuf:"varint,1,opt,name=code,enum=ButtonRequestType" json:"code,omitempty"`
	Data             *string            `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ButtonRequest) Reset()                    { *m = ButtonRequest{} }
func (m *ButtonRequest) String() string            { return proto.CompactTextString(m) }
func (*ButtonRequest) ProtoMessage()               {}
func (*ButtonRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *ButtonRequest) GetCode() ButtonRequestType {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ButtonRequestType_ButtonRequest_Other
}

func (m *ButtonRequest) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

// *
// Request: Computer agrees to wait for HW button press
// @prev ButtonRequest
type ButtonAck struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ButtonAck) Reset()                    { *m = ButtonAck{} }
func (m *ButtonAck) String() string            { return proto.CompactTextString(m) }
func (*ButtonAck) ProtoMessage()               {}
func (*ButtonAck) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

// *
// Response: Device is asking computer to show PIN matrix and awaits PIN encoded using this matrix scheme
// @next PinMatrixAck
// @next Cancel
type PinMatrixRequest struct {
	Type             *PinMatrixRequestType `protobuf:"varint,1,opt,name=type,enum=PinMatrixRequestType" json:"type,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *PinMatrixRequest) Reset()                    { *m = PinMatrixRequest{} }
func (m *PinMatrixRequest) String() string            { return proto.CompactTextString(m) }
func (*PinMatrixRequest) ProtoMessage()               {}
func (*PinMatrixRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *PinMatrixRequest) GetType() PinMatrixRequestType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return PinMatrixRequestType_PinMatrixRequestType_Current
}

// *
// Request: Computer responds with encoded PIN
// @prev PinMatrixRequest
type PinMatrixAck struct {
	Pin              *string `protobuf:"bytes,1,req,name=pin" json:"pin,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PinMatrixAck) Reset()                    { *m = PinMatrixAck{} }
func (m *PinMatrixAck) String() string            { return proto.CompactTextString(m) }
func (*PinMatrixAck) ProtoMessage()               {}
func (*PinMatrixAck) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *PinMatrixAck) GetPin() string {
	if m != nil && m.Pin != nil {
		return *m.Pin
	}
	return ""
}

// *
// Request: Abort last operation that required user interaction
// @prev ButtonRequest
// @prev PinMatrixRequest
// @prev PassphraseRequest
type Cancel struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Cancel) Reset()                    { *m = Cancel{} }
func (m *Cancel) String() string            { return proto.CompactTextString(m) }
func (*Cancel) ProtoMessage()               {}
func (*Cancel) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

// *
// Response: Device awaits encryption passphrase
// @next PassphraseAck
// @next Cancel
type PassphraseRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *PassphraseRequest) Reset()                    { *m = PassphraseRequest{} }
func (m *PassphraseRequest) String() string            { return proto.CompactTextString(m) }
func (*PassphraseRequest) ProtoMessage()               {}
func (*PassphraseRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

// *
// Request: Send passphrase back
// @prev PassphraseRequest
type PassphraseAck struct {
	Passphrase       *string `protobuf:"bytes,1,req,name=passphrase" json:"passphrase,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PassphraseAck) Reset()                    { *m = PassphraseAck{} }
func (m *PassphraseAck) String() string            { return proto.CompactTextString(m) }
func (*PassphraseAck) ProtoMessage()               {}
func (*PassphraseAck) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *PassphraseAck) GetPassphrase() string {
	if m != nil && m.Passphrase != nil {
		return *m.Passphrase
	}
	return ""
}

// *
// Request: Request a sample of random data generated by hardware RNG. May be used for testing.
// @next ButtonRequest
// @next Entropy
// @next Failure
type GetEntropy struct {
	Size             *uint32 `protobuf:"varint,1,req,name=size" json:"size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetEntropy) Reset()                    { *m = GetEntropy{} }
func (m *GetEntropy) String() string            { return proto.CompactTextString(m) }
func (*GetEntropy) ProtoMessage()               {}
func (*GetEntropy) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *GetEntropy) GetSize() uint32 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

// *
// Response: Reply with random data generated by internal RNG
// @prev GetEntropy
type Entropy struct {
	Entropy          []byte `protobuf:"bytes,1,req,name=entropy" json:"entropy,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Entropy) Reset()                    { *m = Entropy{} }
func (m *Entropy) String() string            { return proto.CompactTextString(m) }
func (*Entropy) ProtoMessage()               {}
func (*Entropy) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *Entropy) GetEntropy() []byte {
	if m != nil {
		return m.Entropy
	}
	return nil
}

// *
// Request: Ask device for public key corresponding to address_n path
// @next PassphraseRequest
// @next PublicKey
// @next Failure
type GetPublicKey struct {
	AddressN         []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	EcdsaCurveName   *string  `protobuf:"bytes,2,opt,name=ecdsa_curve_name,json=ecdsaCurveName" json:"ecdsa_curve_name,omitempty"`
	ShowDisplay      *bool    `protobuf:"varint,3,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GetPublicKey) Reset()                    { *m = GetPublicKey{} }
func (m *GetPublicKey) String() string            { return proto.CompactTextString(m) }
func (*GetPublicKey) ProtoMessage()               {}
func (*GetPublicKey) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *GetPublicKey) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *GetPublicKey) GetEcdsaCurveName() string {
	if m != nil && m.EcdsaCurveName != nil {
		return *m.EcdsaCurveName
	}
	return ""
}

func (m *GetPublicKey) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

// *
// Response: Contains public key derived from device private seed
// @prev GetPublicKey
type PublicKey struct {
	Node             *HDNodeType `protobuf:"bytes,1,req,name=node" json:"node,omitempty"`
	Xpub             *string     `protobuf:"bytes,2,opt,name=xpub" json:"xpub,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *PublicKey) Reset()                    { *m = PublicKey{} }
func (m *PublicKey) String() string            { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()               {}
func (*PublicKey) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

func (m *PublicKey) GetNode() *HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *PublicKey) GetXpub() string {
	if m != nil && m.Xpub != nil {
		return *m.Xpub
	}
	return ""
}

// *
// Request: Ask device for address corresponding to address_n path
// @next PassphraseRequest
// @next Address
// @next Failure
type GetAddress struct {
	AddressN         []uint32                  `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	CoinName         *string                   `protobuf:"bytes,2,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`
	ShowDisplay      *bool                     `protobuf:"varint,3,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	Multisig         *MultisigRedeemScriptType `protobuf:"bytes,4,opt,name=multisig" json:"multisig,omitempty"`
	ScriptType       *InputScriptType          `protobuf:"varint,5,opt,name=script_type,json=scriptType,enum=InputScriptType,def=0" json:"script_type,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *GetAddress) Reset()                    { *m = GetAddress{} }
func (m *GetAddress) String() string            { return proto.CompactTextString(m) }
func (*GetAddress) ProtoMessage()               {}
func (*GetAddress) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

const Default_GetAddress_CoinName string = "Bitcoin"
const Default_GetAddress_ScriptType InputScriptType = InputScriptType_SPENDADDRESS

func (m *GetAddress) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *GetAddress) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return Default_GetAddress_CoinName
}

func (m *GetAddress) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

func (m *GetAddress) GetMultisig() *MultisigRedeemScriptType {
	if m != nil {
		return m.Multisig
	}
	return nil
}

func (m *GetAddress) GetScriptType() InputScriptType {
	if m != nil && m.ScriptType != nil {
		return *m.ScriptType
	}
	return Default_GetAddress_ScriptType
}

// *
// Request: Ask device for Ethereum address corresponding to address_n path
// @next PassphraseRequest
// @next EthereumAddress
// @next Failure
type EthereumGetAddress struct {
	AddressN         []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	ShowDisplay      *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *EthereumGetAddress) Reset()                    { *m = EthereumGetAddress{} }
func (m *EthereumGetAddress) String() string            { return proto.CompactTextString(m) }
func (*EthereumGetAddress) ProtoMessage()               {}
func (*EthereumGetAddress) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{21} }

func (m *EthereumGetAddress) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *EthereumGetAddress) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

// *
// Response: Contains address derived from device private seed
// @prev GetAddress
type Address struct {
	Address          *string `protobuf:"bytes,1,req,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{22} }

func (m *Address) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

// *
// Response: Contains an Ethereum address derived from device private seed
// @prev EthereumGetAddress
type EthereumAddress struct {
	Address          []byte `protobuf:"bytes,1,req,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EthereumAddress) Reset()                    { *m = EthereumAddress{} }
func (m *EthereumAddress) String() string            { return proto.CompactTextString(m) }
func (*EthereumAddress) ProtoMessage()               {}
func (*EthereumAddress) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{23} }

func (m *EthereumAddress) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

// *
// Request: Request device to wipe all sensitive data and settings
// @next ButtonRequest
type WipeDevice struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *WipeDevice) Reset()                    { *m = WipeDevice{} }
func (m *WipeDevice) String() string            { return proto.CompactTextString(m) }
func (*WipeDevice) ProtoMessage()               {}
func (*WipeDevice) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{24} }

// *
// Request: Load seed and related internal settings from the computer
// @next ButtonRequest
// @next Success
// @next Failure
type LoadDevice struct {
	Mnemonic             *string     `protobuf:"bytes,1,opt,name=mnemonic" json:"mnemonic,omitempty"`
	Node                 *HDNodeType `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	Pin                  *string     `protobuf:"bytes,3,opt,name=pin" json:"pin,omitempty"`
	PassphraseProtection *bool       `protobuf:"varint,4,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	Language             *string     `protobuf:"bytes,5,opt,name=language,def=english" json:"language,omitempty"`
	Label                *string     `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`
	SkipChecksum         *bool       `protobuf:"varint,7,opt,name=skip_checksum,json=skipChecksum" json:"skip_checksum,omitempty"`
	XXX_unrecognized     []byte      `json:"-"`
}

func (m *LoadDevice) Reset()                    { *m = LoadDevice{} }
func (m *LoadDevice) String() string            { return proto.CompactTextString(m) }
func (*LoadDevice) ProtoMessage()               {}
func (*LoadDevice) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{25} }

const Default_LoadDevice_Language string = "english"

func (m *LoadDevice) GetMnemonic() string {
	if m != nil && m.Mnemonic != nil {
		return *m.Mnemonic
	}
	return ""
}

func (m *LoadDevice) GetNode() *HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *LoadDevice) GetPin() string {
	if m != nil && m.Pin != nil {
		return *m.Pin
	}
	return ""
}

func (m *LoadDevice) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *LoadDevice) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return Default_LoadDevice_Language
}

func (m *LoadDevice) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *LoadDevice) GetSkipChecksum() bool {
	if m != nil && m.SkipChecksum != nil {
		return *m.SkipChecksum
	}
	return false
}

// *
// Request: Ask device to do initialization involving user interaction
// @next EntropyRequest
// @next Failure
type ResetDevice struct {
	DisplayRandom        *bool   `protobuf:"varint,1,opt,name=display_random,json=displayRandom" json:"display_random,omitempty"`
	Strength             *uint32 `protobuf:"varint,2,opt,name=strength,def=256" json:"strength,omitempty"`
	PassphraseProtection *bool   `protobuf:"varint,3,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	PinProtection        *bool   `protobuf:"varint,4,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`
	Language             *string `protobuf:"bytes,5,opt,name=language,def=english" json:"language,omitempty"`
	Label                *string `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *ResetDevice) Reset()                    { *m = ResetDevice{} }
func (m *ResetDevice) String() string            { return proto.CompactTextString(m) }
func (*ResetDevice) ProtoMessage()               {}
func (*ResetDevice) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{26} }

const Default_ResetDevice_Strength uint32 = 256
const Default_ResetDevice_Language string = "english"

func (m *ResetDevice) GetDisplayRandom() bool {
	if m != nil && m.DisplayRandom != nil {
		return *m.DisplayRandom
	}
	return false
}

func (m *ResetDevice) GetStrength() uint32 {
	if m != nil && m.Strength != nil {
		return *m.Strength
	}
	return Default_ResetDevice_Strength
}

func (m *ResetDevice) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *ResetDevice) GetPinProtection() bool {
	if m != nil && m.PinProtection != nil {
		return *m.PinProtection
	}
	return false
}

func (m *ResetDevice) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return Default_ResetDevice_Language
}

func (m *ResetDevice) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

// *
// Response: Ask for additional entropy from host computer
// @prev ResetDevice
// @next EntropyAck
type EntropyRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *EntropyRequest) Reset()                    { *m = EntropyRequest{} }
func (m *EntropyRequest) String() string            { return proto.CompactTextString(m) }
func (*EntropyRequest) ProtoMessage()               {}
func (*EntropyRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{27} }

// *
// Request: Provide additional entropy for seed generation function
// @prev EntropyRequest
// @next ButtonRequest
type EntropyAck struct {
	Entropy          []byte `protobuf:"bytes,1,opt,name=entropy" json:"entropy,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EntropyAck) Reset()                    { *m = EntropyAck{} }
func (m *EntropyAck) String() string            { return proto.CompactTextString(m) }
func (*EntropyAck) ProtoMessage()               {}
func (*EntropyAck) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{28} }

func (m *EntropyAck) GetEntropy() []byte {
	if m != nil {
		return m.Entropy
	}
	return nil
}

// *
// Request: Start recovery workflow asking user for specific words of mnemonic
// Used to recovery device safely even on untrusted computer.
// @next WordRequest
type RecoveryDevice struct {
	WordCount            *uint32 `protobuf:"varint,1,opt,name=word_count,json=wordCount" json:"word_count,omitempty"`
	PassphraseProtection *bool   `protobuf:"varint,2,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	PinProtection        *bool   `protobuf:"varint,3,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`
	Language             *string `protobuf:"bytes,4,opt,name=language,def=english" json:"language,omitempty"`
	Label                *string `protobuf:"bytes,5,opt,name=label" json:"label,omitempty"`
	EnforceWordlist      *bool   `protobuf:"varint,6,opt,name=enforce_wordlist,json=enforceWordlist" json:"enforce_wordlist,omitempty"`
	UseCharacterCipher   *bool   `protobuf:"varint,7,opt,name=use_character_cipher,json=useCharacterCipher" json:"use_character_cipher,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *RecoveryDevice) Reset()                    { *m = RecoveryDevice{} }
func (m *RecoveryDevice) String() string            { return proto.CompactTextString(m) }
func (*RecoveryDevice) ProtoMessage()               {}
func (*RecoveryDevice) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{29} }

const Default_RecoveryDevice_Language string = "english"

func (m *RecoveryDevice) GetWordCount() uint32 {
	if m != nil && m.WordCount != nil {
		return *m.WordCount
	}
	return 0
}

func (m *RecoveryDevice) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *RecoveryDevice) GetPinProtection() bool {
	if m != nil && m.PinProtection != nil {
		return *m.PinProtection
	}
	return false
}

func (m *RecoveryDevice) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return Default_RecoveryDevice_Language
}

func (m *RecoveryDevice) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *RecoveryDevice) GetEnforceWordlist() bool {
	if m != nil && m.EnforceWordlist != nil {
		return *m.EnforceWordlist
	}
	return false
}

func (m *RecoveryDevice) GetUseCharacterCipher() bool {
	if m != nil && m.UseCharacterCipher != nil {
		return *m.UseCharacterCipher
	}
	return false
}

// *
// Response: Device is waiting for user to enter word of the mnemonic
// Its position is shown only on device's internal display.
// @prev RecoveryDevice
// @prev WordAck
type WordRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *WordRequest) Reset()                    { *m = WordRequest{} }
func (m *WordRequest) String() string            { return proto.CompactTextString(m) }
func (*WordRequest) ProtoMessage()               {}
func (*WordRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{30} }

// *
// Request: Computer replies with word from the mnemonic
// @prev WordRequest
// @next WordRequest
// @next Success
// @next Failure
type WordAck struct {
	Word             *string `protobuf:"bytes,1,req,name=word" json:"word,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WordAck) Reset()                    { *m = WordAck{} }
func (m *WordAck) String() string            { return proto.CompactTextString(m) }
func (*WordAck) ProtoMessage()               {}
func (*WordAck) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{31} }

func (m *WordAck) GetWord() string {
	if m != nil && m.Word != nil {
		return *m.Word
	}
	return ""
}

// *
// Response: Device is waiting for user to enter character of the mnemonic using cipher.
// The cipher is shown on device's internal display.
// @prev RecoveryDevice
// @prev CharacterAck
type CharacterRequest struct {
	WordPos          *uint32 `protobuf:"varint,1,req,name=word_pos,json=wordPos" json:"word_pos,omitempty"`
	CharacterPos     *uint32 `protobuf:"varint,2,req,name=character_pos,json=characterPos" json:"character_pos,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CharacterRequest) Reset()                    { *m = CharacterRequest{} }
func (m *CharacterRequest) String() string            { return proto.CompactTextString(m) }
func (*CharacterRequest) ProtoMessage()               {}
func (*CharacterRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{32} }

func (m *CharacterRequest) GetWordPos() uint32 {
	if m != nil && m.WordPos != nil {
		return *m.WordPos
	}
	return 0
}

func (m *CharacterRequest) GetCharacterPos() uint32 {
	if m != nil && m.CharacterPos != nil {
		return *m.CharacterPos
	}
	return 0
}

// *
// Request: Computer replies with character from the mnemonic using cipher
// @prev CharacterRequest
// @next CharacterRequest
// @next Failure
type CharacterAck struct {
	Character        *string `protobuf:"bytes,1,opt,name=character" json:"character,omitempty"`
	Delete           *bool   `protobuf:"varint,2,opt,name=delete" json:"delete,omitempty"`
	Done             *bool   `protobuf:"varint,3,opt,name=done" json:"done,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CharacterAck) Reset()                    { *m = CharacterAck{} }
func (m *CharacterAck) String() string            { return proto.CompactTextString(m) }
func (*CharacterAck) ProtoMessage()               {}
func (*CharacterAck) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{33} }

func (m *CharacterAck) GetCharacter() string {
	if m != nil && m.Character != nil {
		return *m.Character
	}
	return ""
}

func (m *CharacterAck) GetDelete() bool {
	if m != nil && m.Delete != nil {
		return *m.Delete
	}
	return false
}

func (m *CharacterAck) GetDone() bool {
	if m != nil && m.Done != nil {
		return *m.Done
	}
	return false
}

// *
// Request: Ask device to sign message
// @next MessageSignature
// @next Failure
type SignMessage struct {
	AddressN         []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Message          []byte   `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	CoinName         *string  `protobuf:"bytes,3,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SignMessage) Reset()                    { *m = SignMessage{} }
func (m *SignMessage) String() string            { return proto.CompactTextString(m) }
func (*SignMessage) ProtoMessage()               {}
func (*SignMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{34} }

const Default_SignMessage_CoinName string = "Bitcoin"

func (m *SignMessage) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *SignMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SignMessage) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return Default_SignMessage_CoinName
}

// *
// Request: Ask device to verify message
// @next Success
// @next Failure
type VerifyMessage struct {
	Address          *string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Signature        []byte  `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	Message          []byte  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	CoinName         *string `protobuf:"bytes,4,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *VerifyMessage) Reset()                    { *m = VerifyMessage{} }
func (m *VerifyMessage) String() string            { return proto.CompactTextString(m) }
func (*VerifyMessage) ProtoMessage()               {}
func (*VerifyMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{35} }

const Default_VerifyMessage_CoinName string = "Bitcoin"

func (m *VerifyMessage) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *VerifyMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *VerifyMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *VerifyMessage) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return Default_VerifyMessage_CoinName
}

// *
// Response: Signed message
// @prev SignMessage
type MessageSignature struct {
	Address          *string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Signature        []byte  `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MessageSignature) Reset()                    { *m = MessageSignature{} }
func (m *MessageSignature) String() string            { return proto.CompactTextString(m) }
func (*MessageSignature) ProtoMessage()               {}
func (*MessageSignature) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{36} }

func (m *MessageSignature) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *MessageSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// *
// Request: Ask device to encrypt message
// @next EncryptedMessage
// @next Failure
type EncryptMessage struct {
	Pubkey           []byte   `protobuf:"bytes,1,opt,name=pubkey" json:"pubkey,omitempty"`
	Message          []byte   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	DisplayOnly      *bool    `protobuf:"varint,3,opt,name=display_only,json=displayOnly" json:"display_only,omitempty"`
	AddressN         []uint32 `protobuf:"varint,4,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	CoinName         *string  `protobuf:"bytes,5,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *EncryptMessage) Reset()                    { *m = EncryptMessage{} }
func (m *EncryptMessage) String() string            { return proto.CompactTextString(m) }
func (*EncryptMessage) ProtoMessage()               {}
func (*EncryptMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{37} }

const Default_EncryptMessage_CoinName string = "Bitcoin"

func (m *EncryptMessage) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *EncryptMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *EncryptMessage) GetDisplayOnly() bool {
	if m != nil && m.DisplayOnly != nil {
		return *m.DisplayOnly
	}
	return false
}

func (m *EncryptMessage) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *EncryptMessage) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return Default_EncryptMessage_CoinName
}

// *
// Response: Encrypted message
// @prev EncryptMessage
type EncryptedMessage struct {
	Nonce            []byte `protobuf:"bytes,1,opt,name=nonce" json:"nonce,omitempty"`
	Message          []byte `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Hmac             []byte `protobuf:"bytes,3,opt,name=hmac" json:"hmac,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EncryptedMessage) Reset()                    { *m = EncryptedMessage{} }
func (m *EncryptedMessage) String() string            { return proto.CompactTextString(m) }
func (*EncryptedMessage) ProtoMessage()               {}
func (*EncryptedMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{38} }

func (m *EncryptedMessage) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *EncryptedMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *EncryptedMessage) GetHmac() []byte {
	if m != nil {
		return m.Hmac
	}
	return nil
}

// *
// Request: Ask device to decrypt message
// @next Success
// @next Failure
type DecryptMessage struct {
	AddressN         []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Nonce            []byte   `protobuf:"bytes,2,opt,name=nonce" json:"nonce,omitempty"`
	Message          []byte   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Hmac             []byte   `protobuf:"bytes,4,opt,name=hmac" json:"hmac,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DecryptMessage) Reset()                    { *m = DecryptMessage{} }
func (m *DecryptMessage) String() string            { return proto.CompactTextString(m) }
func (*DecryptMessage) ProtoMessage()               {}
func (*DecryptMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{39} }

func (m *DecryptMessage) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *DecryptMessage) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *DecryptMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *DecryptMessage) GetHmac() []byte {
	if m != nil {
		return m.Hmac
	}
	return nil
}

// *
// Response: Decrypted message
// @prev DecryptedMessage
type DecryptedMessage struct {
	Message          []byte  `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Address          *string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DecryptedMessage) Reset()                    { *m = DecryptedMessage{} }
func (m *DecryptedMessage) String() string            { return proto.CompactTextString(m) }
func (*DecryptedMessage) ProtoMessage()               {}
func (*DecryptedMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{40} }

func (m *DecryptedMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *DecryptedMessage) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

// *
// Request: Ask device to encrypt or decrypt value of given key
// @next CipheredKeyValue
// @next Failure
type CipherKeyValue struct {
	AddressN         []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Key              *string  `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value            []byte   `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Encrypt          *bool    `protobuf:"varint,4,opt,name=encrypt" json:"encrypt,omitempty"`
	AskOnEncrypt     *bool    `protobuf:"varint,5,opt,name=ask_on_encrypt,json=askOnEncrypt" json:"ask_on_encrypt,omitempty"`
	AskOnDecrypt     *bool    `protobuf:"varint,6,opt,name=ask_on_decrypt,json=askOnDecrypt" json:"ask_on_decrypt,omitempty"`
	Iv               []byte   `protobuf:"bytes,7,opt,name=iv" json:"iv,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CipherKeyValue) Reset()                    { *m = CipherKeyValue{} }
func (m *CipherKeyValue) String() string            { return proto.CompactTextString(m) }
func (*CipherKeyValue) ProtoMessage()               {}
func (*CipherKeyValue) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{41} }

func (m *CipherKeyValue) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *CipherKeyValue) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *CipherKeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CipherKeyValue) GetEncrypt() bool {
	if m != nil && m.Encrypt != nil {
		return *m.Encrypt
	}
	return false
}

func (m *CipherKeyValue) GetAskOnEncrypt() bool {
	if m != nil && m.AskOnEncrypt != nil {
		return *m.AskOnEncrypt
	}
	return false
}

func (m *CipherKeyValue) GetAskOnDecrypt() bool {
	if m != nil && m.AskOnDecrypt != nil {
		return *m.AskOnDecrypt
	}
	return false
}

func (m *CipherKeyValue) GetIv() []byte {
	if m != nil {
		return m.Iv
	}
	return nil
}

// *
// Response: Return ciphered/deciphered value
// @prev CipherKeyValue
type CipheredKeyValue struct {
	Value            []byte `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CipheredKeyValue) Reset()                    { *m = CipheredKeyValue{} }
func (m *CipheredKeyValue) String() string            { return proto.CompactTextString(m) }
func (*CipheredKeyValue) ProtoMessage()               {}
func (*CipheredKeyValue) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{42} }

func (m *CipheredKeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// *
// Request:  Estimated size of the transaction
// This behaves exactly like SignTx, which means that it can ask using TxRequest
// This call is non-blocking (except possible PassphraseRequest to unlock the seed)
// @next TxSize
// @next Failure
type EstimateTxSize struct {
	OutputsCount     *uint32 `protobuf:"varint,1,req,name=outputs_count,json=outputsCount" json:"outputs_count,omitempty"`
	InputsCount      *uint32 `protobuf:"varint,2,req,name=inputs_count,json=inputsCount" json:"inputs_count,omitempty"`
	CoinName         *string `protobuf:"bytes,3,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EstimateTxSize) Reset()                    { *m = EstimateTxSize{} }
func (m *EstimateTxSize) String() string            { return proto.CompactTextString(m) }
func (*EstimateTxSize) ProtoMessage()               {}
func (*EstimateTxSize) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{43} }

const Default_EstimateTxSize_CoinName string = "Bitcoin"

func (m *EstimateTxSize) GetOutputsCount() uint32 {
	if m != nil && m.OutputsCount != nil {
		return *m.OutputsCount
	}
	return 0
}

func (m *EstimateTxSize) GetInputsCount() uint32 {
	if m != nil && m.InputsCount != nil {
		return *m.InputsCount
	}
	return 0
}

func (m *EstimateTxSize) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return Default_EstimateTxSize_CoinName
}

// *
// Response: Estimated size of the transaction
// @prev EstimateTxSize
type TxSize struct {
	TxSize           *uint32 `protobuf:"varint,1,opt,name=tx_size,json=txSize" json:"tx_size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TxSize) Reset()                    { *m = TxSize{} }
func (m *TxSize) String() string            { return proto.CompactTextString(m) }
func (*TxSize) ProtoMessage()               {}
func (*TxSize) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{44} }

func (m *TxSize) GetTxSize() uint32 {
	if m != nil && m.TxSize != nil {
		return *m.TxSize
	}
	return 0
}

// *
// Request: Ask device to sign transaction
// @next PassphraseRequest
// @next PinMatrixRequest
// @next TxRequest
// @next Failure
type SignTx struct {
	OutputsCount     *uint32 `protobuf:"varint,1,req,name=outputs_count,json=outputsCount" json:"outputs_count,omitempty"`
	InputsCount      *uint32 `protobuf:"varint,2,req,name=inputs_count,json=inputsCount" json:"inputs_count,omitempty"`
	CoinName         *string `protobuf:"bytes,3,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`
	Version          *uint32 `protobuf:"varint,4,opt,name=version,def=1" json:"version,omitempty"`
	LockTime         *uint32 `protobuf:"varint,5,opt,name=lock_time,json=lockTime,def=0" json:"lock_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SignTx) Reset()                    { *m = SignTx{} }
func (m *SignTx) String() string            { return proto.CompactTextString(m) }
func (*SignTx) ProtoMessage()               {}
func (*SignTx) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{45} }

const Default_SignTx_CoinName string = "Bitcoin"
const Default_SignTx_Version uint32 = 1
const Default_SignTx_LockTime uint32 = 0

func (m *SignTx) GetOutputsCount() uint32 {
	if m != nil && m.OutputsCount != nil {
		return *m.OutputsCount
	}
	return 0
}

func (m *SignTx) GetInputsCount() uint32 {
	if m != nil && m.InputsCount != nil {
		return *m.InputsCount
	}
	return 0
}

func (m *SignTx) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return Default_SignTx_CoinName
}

func (m *SignTx) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_SignTx_Version
}

func (m *SignTx) GetLockTime() uint32 {
	if m != nil && m.LockTime != nil {
		return *m.LockTime
	}
	return Default_SignTx_LockTime
}

// *
// Request: Simplified transaction signing
// This method doesn't support streaming, so there are hardware limits in number of inputs and outputs.
// In case of success, the result is returned using TxRequest message.
// @next PassphraseRequest
// @next PinMatrixRequest
// @next TxRequest
// @next Failure
type SimpleSignTx struct {
	Inputs           []*TxInputType     `protobuf:"bytes,1,rep,name=inputs" json:"inputs,omitempty"`
	Outputs          []*TxOutputType    `protobuf:"bytes,2,rep,name=outputs" json:"outputs,omitempty"`
	Transactions     []*TransactionType `protobuf:"bytes,3,rep,name=transactions" json:"transactions,omitempty"`
	CoinName         *string            `protobuf:"bytes,4,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`
	Version          *uint32            `protobuf:"varint,5,opt,name=version,def=1" json:"version,omitempty"`
	LockTime         *uint32            `protobuf:"varint,6,opt,name=lock_time,json=lockTime,def=0" json:"lock_time,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *SimpleSignTx) Reset()                    { *m = SimpleSignTx{} }
func (m *SimpleSignTx) String() string            { return proto.CompactTextString(m) }
func (*SimpleSignTx) ProtoMessage()               {}
func (*SimpleSignTx) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{46} }

const Default_SimpleSignTx_CoinName string = "Bitcoin"
const Default_SimpleSignTx_Version uint32 = 1
const Default_SimpleSignTx_LockTime uint32 = 0

func (m *SimpleSignTx) GetInputs() []*TxInputType {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *SimpleSignTx) GetOutputs() []*TxOutputType {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *SimpleSignTx) GetTransactions() []*TransactionType {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *SimpleSignTx) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return Default_SimpleSignTx_CoinName
}

func (m *SimpleSignTx) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_SimpleSignTx_Version
}

func (m *SimpleSignTx) GetLockTime() uint32 {
	if m != nil && m.LockTime != nil {
		return *m.LockTime
	}
	return Default_SimpleSignTx_LockTime
}

// *
// Response: Device asks for information for signing transaction or returns the last result
// If request_index is set, device awaits TxAck message (with fields filled in according to request_type)
// If signature_index is set, 'signature' contains signed input of signature_index's input
// @prev SignTx
// @prev SimpleSignTx
// @prev TxAck
type TxRequest struct {
	RequestType      *RequestType             `protobuf:"varint,1,opt,name=request_type,json=requestType,enum=RequestType" json:"request_type,omitempty"`
	Details          *TxRequestDetailsType    `protobuf:"bytes,2,opt,name=details" json:"details,omitempty"`
	Serialized       *TxRequestSerializedType `protobuf:"bytes,3,opt,name=serialized" json:"serialized,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *TxRequest) Reset()                    { *m = TxRequest{} }
func (m *TxRequest) String() string            { return proto.CompactTextString(m) }
func (*TxRequest) ProtoMessage()               {}
func (*TxRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{47} }

func (m *TxRequest) GetRequestType() RequestType {
	if m != nil && m.RequestType != nil {
		return *m.RequestType
	}
	return RequestType_TXINPUT
}

func (m *TxRequest) GetDetails() *TxRequestDetailsType {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *TxRequest) GetSerialized() *TxRequestSerializedType {
	if m != nil {
		return m.Serialized
	}
	return nil
}

// *
// Request: Reported transaction data
// @prev TxRequest
// @next TxRequest
type TxAck struct {
	Tx               *TransactionType `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *TxAck) Reset()                    { *m = TxAck{} }
func (m *TxAck) String() string            { return proto.CompactTextString(m) }
func (*TxAck) ProtoMessage()               {}
func (*TxAck) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{48} }

func (m *TxAck) GetTx() *TransactionType {
	if m != nil {
		return m.Tx
	}
	return nil
}

// *
// Request: Reported raw transaction data
// @prev TxRequest
// @next TxRequest
type RawTxAck struct {
	Tx               *RawTransactionType `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *RawTxAck) Reset()                    { *m = RawTxAck{} }
func (m *RawTxAck) String() string            { return proto.CompactTextString(m) }
func (*RawTxAck) ProtoMessage()               {}
func (*RawTxAck) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{49} }

func (m *RawTxAck) GetTx() *RawTransactionType {
	if m != nil {
		return m.Tx
	}
	return nil
}

// *
// Request: Ask device to sign transaction
// All fields are optional from the protocol's point of view. Each field defaults to value `0` if missing.
// Note: the first at most 1024 bytes of data MUST be transmitted as part of this message.
// @next PassphraseRequest
// @next PinMatrixRequest
// @next EthereumTxRequest
// @next Failure
type EthereumSignTx struct {
	AddressN         []uint32           `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Nonce            []byte             `protobuf:"bytes,2,opt,name=nonce" json:"nonce,omitempty"`
	GasPrice         []byte             `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice" json:"gas_price,omitempty"`
	GasLimit         []byte             `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`
	To               []byte             `protobuf:"bytes,5,opt,name=to" json:"to,omitempty"`
	Value            []byte             `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	DataInitialChunk []byte             `protobuf:"bytes,7,opt,name=data_initial_chunk,json=dataInitialChunk" json:"data_initial_chunk,omitempty"`
	DataLength       *uint32            `protobuf:"varint,8,opt,name=data_length,json=dataLength" json:"data_length,omitempty"`
	ToAddressN       []uint32           `protobuf:"varint,9,rep,name=to_address_n,json=toAddressN" json:"to_address_n,omitempty"`
	AddressType      *OutputAddressType `protobuf:"varint,10,opt,name=address_type,json=addressType,enum=OutputAddressType" json:"address_type,omitempty"`
	ExchangeType     *ExchangeType      `protobuf:"bytes,11,opt,name=exchange_type,json=exchangeType" json:"exchange_type,omitempty"`
	ChainId          *uint32            `protobuf:"varint,12,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	TokenValue       []byte             `protobuf:"bytes,100,opt,name=token_value,json=tokenValue" json:"token_value,omitempty"`
	TokenTo          []byte             `protobuf:"bytes,101,opt,name=token_to,json=tokenTo" json:"token_to,omitempty"`
	TokenShortcut    *string            `protobuf:"bytes,102,opt,name=token_shortcut,json=tokenShortcut" json:"token_shortcut,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *EthereumSignTx) Reset()                    { *m = EthereumSignTx{} }
func (m *EthereumSignTx) String() string            { return proto.CompactTextString(m) }
func (*EthereumSignTx) ProtoMessage()               {}
func (*EthereumSignTx) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{50} }

func (m *EthereumSignTx) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *EthereumSignTx) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *EthereumSignTx) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *EthereumSignTx) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *EthereumSignTx) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *EthereumSignTx) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *EthereumSignTx) GetDataInitialChunk() []byte {
	if m != nil {
		return m.DataInitialChunk
	}
	return nil
}

func (m *EthereumSignTx) GetDataLength() uint32 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

func (m *EthereumSignTx) GetToAddressN() []uint32 {
	if m != nil {
		return m.ToAddressN
	}
	return nil
}

func (m *EthereumSignTx) GetAddressType() OutputAddressType {
	if m != nil && m.AddressType != nil {
		return *m.AddressType
	}
	return OutputAddressType_SPEND
}

func (m *EthereumSignTx) GetExchangeType() *ExchangeType {
	if m != nil {
		return m.ExchangeType
	}
	return nil
}

func (m *EthereumSignTx) GetChainId() uint32 {
	if m != nil && m.ChainId != nil {
		return *m.ChainId
	}
	return 0
}

func (m *EthereumSignTx) GetTokenValue() []byte {
	if m != nil {
		return m.TokenValue
	}
	return nil
}

func (m *EthereumSignTx) GetTokenTo() []byte {
	if m != nil {
		return m.TokenTo
	}
	return nil
}

func (m *EthereumSignTx) GetTokenShortcut() string {
	if m != nil && m.TokenShortcut != nil {
		return *m.TokenShortcut
	}
	return ""
}

// *
// Response: Device asks for more data from transaction payload, or returns the signature.
// If data_length is set, device awaits that many more bytes of payload.
// Otherwise, the signature_* fields contain the computed transaction signature. All three fields will be present.
// @prev EthereumSignTx
// @next EthereumTxAck
type EthereumTxRequest struct {
	DataLength       *uint32 `protobuf:"varint,1,opt,name=data_length,json=dataLength" json:"data_length,omitempty"`
	SignatureV       *uint32 `protobuf:"varint,2,opt,name=signature_v,json=signatureV" json:"signature_v,omitempty"`
	SignatureR       []byte  `protobuf:"bytes,3,opt,name=signature_r,json=signatureR" json:"signature_r,omitempty"`
	SignatureS       []byte  `protobuf:"bytes,4,opt,name=signature_s,json=signatureS" json:"signature_s,omitempty"`
	Hash             []byte  `protobuf:"bytes,5,opt,name=hash" json:"hash,omitempty"`
	SignatureDer     []byte  `protobuf:"bytes,6,opt,name=signature_der,json=signatureDer" json:"signature_der,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EthereumTxRequest) Reset()                    { *m = EthereumTxRequest{} }
func (m *EthereumTxRequest) String() string            { return proto.CompactTextString(m) }
func (*EthereumTxRequest) ProtoMessage()               {}
func (*EthereumTxRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{51} }

func (m *EthereumTxRequest) GetDataLength() uint32 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

func (m *EthereumTxRequest) GetSignatureV() uint32 {
	if m != nil && m.SignatureV != nil {
		return *m.SignatureV
	}
	return 0
}

func (m *EthereumTxRequest) GetSignatureR() []byte {
	if m != nil {
		return m.SignatureR
	}
	return nil
}

func (m *EthereumTxRequest) GetSignatureS() []byte {
	if m != nil {
		return m.SignatureS
	}
	return nil
}

func (m *EthereumTxRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *EthereumTxRequest) GetSignatureDer() []byte {
	if m != nil {
		return m.SignatureDer
	}
	return nil
}

// *
// Request: Transaction payload data.
// @prev EthereumTxRequest
// @next EthereumTxRequest
type EthereumTxAck struct {
	DataChunk        []byte `protobuf:"bytes,1,opt,name=data_chunk,json=dataChunk" json:"data_chunk,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EthereumTxAck) Reset()                    { *m = EthereumTxAck{} }
func (m *EthereumTxAck) String() string            { return proto.CompactTextString(m) }
func (*EthereumTxAck) ProtoMessage()               {}
func (*EthereumTxAck) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{52} }

func (m *EthereumTxAck) GetDataChunk() []byte {
	if m != nil {
		return m.DataChunk
	}
	return nil
}

// *
// Request: Ask device to sign identity
// @next SignedIdentity
// @next Failure
type SignIdentity struct {
	Identity         *IdentityType `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
	ChallengeHidden  []byte        `protobuf:"bytes,2,opt,name=challenge_hidden,json=challengeHidden" json:"challenge_hidden,omitempty"`
	ChallengeVisual  *string       `protobuf:"bytes,3,opt,name=challenge_visual,json=challengeVisual" json:"challenge_visual,omitempty"`
	EcdsaCurveName   *string       `protobuf:"bytes,4,opt,name=ecdsa_curve_name,json=ecdsaCurveName" json:"ecdsa_curve_name,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *SignIdentity) Reset()                    { *m = SignIdentity{} }
func (m *SignIdentity) String() string            { return proto.CompactTextString(m) }
func (*SignIdentity) ProtoMessage()               {}
func (*SignIdentity) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{53} }

func (m *SignIdentity) GetIdentity() *IdentityType {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *SignIdentity) GetChallengeHidden() []byte {
	if m != nil {
		return m.ChallengeHidden
	}
	return nil
}

func (m *SignIdentity) GetChallengeVisual() string {
	if m != nil && m.ChallengeVisual != nil {
		return *m.ChallengeVisual
	}
	return ""
}

func (m *SignIdentity) GetEcdsaCurveName() string {
	if m != nil && m.EcdsaCurveName != nil {
		return *m.EcdsaCurveName
	}
	return ""
}

// *
// Response: Device provides signed identity
// @prev SignIdentity
type SignedIdentity struct {
	Address          *string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	PublicKey        []byte  `protobuf:"bytes,2,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	Signature        []byte  `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SignedIdentity) Reset()                    { *m = SignedIdentity{} }
func (m *SignedIdentity) String() string            { return proto.CompactTextString(m) }
func (*SignedIdentity) ProtoMessage()               {}
func (*SignedIdentity) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{54} }

func (m *SignedIdentity) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *SignedIdentity) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *SignedIdentity) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// *
// Request: Ask device to apply policy
// @next Success
// @next Failure
// @next ButtonRequest
// @next PinMatrixRequest
type ApplyPolicies struct {
	Policy           []*PolicyType `protobuf:"bytes,1,rep,name=policy" json:"policy,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ApplyPolicies) Reset()                    { *m = ApplyPolicies{} }
func (m *ApplyPolicies) String() string            { return proto.CompactTextString(m) }
func (*ApplyPolicies) ProtoMessage()               {}
func (*ApplyPolicies) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{55} }

func (m *ApplyPolicies) GetPolicy() []*PolicyType {
	if m != nil {
		return m.Policy
	}
	return nil
}

// *
// Request: Ask the device to return a hash of flash memory
// @next FlashHashResponse
// @next Failure
type FlashHash struct {
	Address          *uint32 `protobuf:"varint,1,opt,name=address" json:"address,omitempty"`
	Length           *uint32 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	Challenge        []byte  `protobuf:"bytes,3,opt,name=challenge" json:"challenge,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FlashHash) Reset()                    { *m = FlashHash{} }
func (m *FlashHash) String() string            { return proto.CompactTextString(m) }
func (*FlashHash) ProtoMessage()               {}
func (*FlashHash) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{56} }

func (m *FlashHash) GetAddress() uint32 {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return 0
}

func (m *FlashHash) GetLength() uint32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *FlashHash) GetChallenge() []byte {
	if m != nil {
		return m.Challenge
	}
	return nil
}

// *
// Request: Write a chunk of data into flash memory
// @next FlashHashResponse
// @next Failure
type FlashWrite struct {
	Address          *uint32 `protobuf:"varint,1,opt,name=address" json:"address,omitempty"`
	Data             []byte  `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Erase            *bool   `protobuf:"varint,3,opt,name=erase" json:"erase,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FlashWrite) Reset()                    { *m = FlashWrite{} }
func (m *FlashWrite) String() string            { return proto.CompactTextString(m) }
func (*FlashWrite) ProtoMessage()               {}
func (*FlashWrite) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{57} }

func (m *FlashWrite) GetAddress() uint32 {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return 0
}

func (m *FlashWrite) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FlashWrite) GetErase() bool {
	if m != nil && m.Erase != nil {
		return *m.Erase
	}
	return false
}

// *
// Response: Returns hash of requested data sector
// @prev FlashHash
// @prev FlashWrite
type FlashHashResponse struct {
	Data             []byte `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FlashHashResponse) Reset()                    { *m = FlashHashResponse{} }
func (m *FlashHashResponse) String() string            { return proto.CompactTextString(m) }
func (*FlashHashResponse) ProtoMessage()               {}
func (*FlashHashResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{58} }

func (m *FlashHashResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// *
// Request: Returns a portion of flash requested
// @next DebugLinkFlashDumpResponse
// @next Failure
type DebugLinkFlashDump struct {
	Address          *uint32 `protobuf:"varint,1,opt,name=address" json:"address,omitempty"`
	Length           *uint32 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DebugLinkFlashDump) Reset()                    { *m = DebugLinkFlashDump{} }
func (m *DebugLinkFlashDump) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkFlashDump) ProtoMessage()               {}
func (*DebugLinkFlashDump) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{59} }

func (m *DebugLinkFlashDump) GetAddress() uint32 {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return 0
}

func (m *DebugLinkFlashDump) GetLength() uint32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

// *
// Response: flash data
// @prev DebugLinkFlashDump
type DebugLinkFlashDumpResponse struct {
	Data             []byte `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DebugLinkFlashDumpResponse) Reset()                    { *m = DebugLinkFlashDumpResponse{} }
func (m *DebugLinkFlashDumpResponse) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkFlashDumpResponse) ProtoMessage()               {}
func (*DebugLinkFlashDumpResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{60} }

func (m *DebugLinkFlashDumpResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// *
// Request: Ask the device to perform a soft reset
type SoftReset struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SoftReset) Reset()                    { *m = SoftReset{} }
func (m *SoftReset) String() string            { return proto.CompactTextString(m) }
func (*SoftReset) ProtoMessage()               {}
func (*SoftReset) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{61} }

// *
// Request: Ask device to erase its firmware
// @next Success
// @next Failure
type FirmwareErase struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *FirmwareErase) Reset()                    { *m = FirmwareErase{} }
func (m *FirmwareErase) String() string            { return proto.CompactTextString(m) }
func (*FirmwareErase) ProtoMessage()               {}
func (*FirmwareErase) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{62} }

// *
// Request: Send firmware in binary form to the device
// @next Success
// @next Failure
type FirmwareUpload struct {
	PayloadHash      []byte `protobuf:"bytes,1,req,name=payload_hash,json=payloadHash" json:"payload_hash,omitempty"`
	Payload          []byte `protobuf:"bytes,2,req,name=payload" json:"payload,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FirmwareUpload) Reset()                    { *m = FirmwareUpload{} }
func (m *FirmwareUpload) String() string            { return proto.CompactTextString(m) }
func (*FirmwareUpload) ProtoMessage()               {}
func (*FirmwareUpload) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{63} }

func (m *FirmwareUpload) GetPayloadHash() []byte {
	if m != nil {
		return m.PayloadHash
	}
	return nil
}

func (m *FirmwareUpload) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// *
// Request: "Press" the button on the device
// @next Success
type DebugLinkDecision struct {
	YesNo            *bool  `protobuf:"varint,1,req,name=yes_no,json=yesNo" json:"yes_no,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DebugLinkDecision) Reset()                    { *m = DebugLinkDecision{} }
func (m *DebugLinkDecision) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkDecision) ProtoMessage()               {}
func (*DebugLinkDecision) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{64} }

func (m *DebugLinkDecision) GetYesNo() bool {
	if m != nil && m.YesNo != nil {
		return *m.YesNo
	}
	return false
}

// *
// Request: Computer asks for device state
// @next DebugLinkState
type DebugLinkGetState struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DebugLinkGetState) Reset()                    { *m = DebugLinkGetState{} }
func (m *DebugLinkGetState) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkGetState) ProtoMessage()               {}
func (*DebugLinkGetState) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{65} }

// *
// Response: Device current state
// @prev DebugLinkGetState
type DebugLinkState struct {
	Layout                    []byte      `protobuf:"bytes,1,opt,name=layout" json:"layout,omitempty"`
	Pin                       *string     `protobuf:"bytes,2,opt,name=pin" json:"pin,omitempty"`
	Matrix                    *string     `protobuf:"bytes,3,opt,name=matrix" json:"matrix,omitempty"`
	Mnemonic                  *string     `protobuf:"bytes,4,opt,name=mnemonic" json:"mnemonic,omitempty"`
	Node                      *HDNodeType `protobuf:"bytes,5,opt,name=node" json:"node,omitempty"`
	PassphraseProtection      *bool       `protobuf:"varint,6,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	ResetWord                 *string     `protobuf:"bytes,7,opt,name=reset_word,json=resetWord" json:"reset_word,omitempty"`
	ResetEntropy              []byte      `protobuf:"bytes,8,opt,name=reset_entropy,json=resetEntropy" json:"reset_entropy,omitempty"`
	RecoveryFakeWord          *string     `protobuf:"bytes,9,opt,name=recovery_fake_word,json=recoveryFakeWord" json:"recovery_fake_word,omitempty"`
	RecoveryWordPos           *uint32     `protobuf:"varint,10,opt,name=recovery_word_pos,json=recoveryWordPos" json:"recovery_word_pos,omitempty"`
	RecoveryCipher            *string     `protobuf:"bytes,11,opt,name=recovery_cipher,json=recoveryCipher" json:"recovery_cipher,omitempty"`
	RecoveryAutoCompletedWord *string     `protobuf:"bytes,12,opt,name=recovery_auto_completed_word,json=recoveryAutoCompletedWord" json:"recovery_auto_completed_word,omitempty"`
	FirmwareHash              []byte      `protobuf:"bytes,13,opt,name=firmware_hash,json=firmwareHash" json:"firmware_hash,omitempty"`
	StorageHash               []byte      `protobuf:"bytes,14,opt,name=storage_hash,json=storageHash" json:"storage_hash,omitempty"`
	XXX_unrecognized          []byte      `json:"-"`
}

func (m *DebugLinkState) Reset()                    { *m = DebugLinkState{} }
func (m *DebugLinkState) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkState) ProtoMessage()               {}
func (*DebugLinkState) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{66} }

func (m *DebugLinkState) GetLayout() []byte {
	if m != nil {
		return m.Layout
	}
	return nil
}

func (m *DebugLinkState) GetPin() string {
	if m != nil && m.Pin != nil {
		return *m.Pin
	}
	return ""
}

func (m *DebugLinkState) GetMatrix() string {
	if m != nil && m.Matrix != nil {
		return *m.Matrix
	}
	return ""
}

func (m *DebugLinkState) GetMnemonic() string {
	if m != nil && m.Mnemonic != nil {
		return *m.Mnemonic
	}
	return ""
}

func (m *DebugLinkState) GetNode() *HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *DebugLinkState) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *DebugLinkState) GetResetWord() string {
	if m != nil && m.ResetWord != nil {
		return *m.ResetWord
	}
	return ""
}

func (m *DebugLinkState) GetResetEntropy() []byte {
	if m != nil {
		return m.ResetEntropy
	}
	return nil
}

func (m *DebugLinkState) GetRecoveryFakeWord() string {
	if m != nil && m.RecoveryFakeWord != nil {
		return *m.RecoveryFakeWord
	}
	return ""
}

func (m *DebugLinkState) GetRecoveryWordPos() uint32 {
	if m != nil && m.RecoveryWordPos != nil {
		return *m.RecoveryWordPos
	}
	return 0
}

func (m *DebugLinkState) GetRecoveryCipher() string {
	if m != nil && m.RecoveryCipher != nil {
		return *m.RecoveryCipher
	}
	return ""
}

func (m *DebugLinkState) GetRecoveryAutoCompletedWord() string {
	if m != nil && m.RecoveryAutoCompletedWord != nil {
		return *m.RecoveryAutoCompletedWord
	}
	return ""
}

func (m *DebugLinkState) GetFirmwareHash() []byte {
	if m != nil {
		return m.FirmwareHash
	}
	return nil
}

func (m *DebugLinkState) GetStorageHash() []byte {
	if m != nil {
		return m.StorageHash
	}
	return nil
}

// *
// Request: Ask device to restart
type DebugLinkStop struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DebugLinkStop) Reset()                    { *m = DebugLinkStop{} }
func (m *DebugLinkStop) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkStop) ProtoMessage()               {}
func (*DebugLinkStop) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{67} }

// *
// Response: Device wants host to log event
type DebugLinkLog struct {
	Level            *uint32 `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	Bucket           *string `protobuf:"bytes,2,opt,name=bucket" json:"bucket,omitempty"`
	Text             *string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DebugLinkLog) Reset()                    { *m = DebugLinkLog{} }
func (m *DebugLinkLog) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkLog) ProtoMessage()               {}
func (*DebugLinkLog) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{68} }

func (m *DebugLinkLog) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *DebugLinkLog) GetBucket() string {
	if m != nil && m.Bucket != nil {
		return *m.Bucket
	}
	return ""
}

func (m *DebugLinkLog) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

// *
// Request: Ask device to fill config area with sample data (used for testing firmware upload)
type DebugLinkFillConfig struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DebugLinkFillConfig) Reset()                    { *m = DebugLinkFillConfig{} }
func (m *DebugLinkFillConfig) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkFillConfig) ProtoMessage()               {}
func (*DebugLinkFillConfig) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{69} }

// *
// Response: Device sending screen state
type DebugLinkScreenDump struct {
	Screen           []byte `protobuf:"bytes,1,opt,name=screen" json:"screen,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DebugLinkScreenDump) Reset()                    { *m = DebugLinkScreenDump{} }
func (m *DebugLinkScreenDump) String() string            { return proto.CompactTextString(m) }
func (*DebugLinkScreenDump) ProtoMessage()               {}
func (*DebugLinkScreenDump) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{70} }

func (m *DebugLinkScreenDump) GetScreen() []byte {
	if m != nil {
		return m.Screen
	}
	return nil
}

func init() {
	proto.RegisterType((*Initialize)(nil), "Initialize")
	proto.RegisterType((*GetFeatures)(nil), "GetFeatures")
	proto.RegisterType((*Features)(nil), "Features")
	proto.RegisterType((*ClearSession)(nil), "ClearSession")
	proto.RegisterType((*ApplySettings)(nil), "ApplySettings")
	proto.RegisterType((*ChangePin)(nil), "ChangePin")
	proto.RegisterType((*Ping)(nil), "Ping")
	proto.RegisterType((*Success)(nil), "Success")
	proto.RegisterType((*Failure)(nil), "Failure")
	proto.RegisterType((*ButtonRequest)(nil), "ButtonRequest")
	proto.RegisterType((*ButtonAck)(nil), "ButtonAck")
	proto.RegisterType((*PinMatrixRequest)(nil), "PinMatrixRequest")
	proto.RegisterType((*PinMatrixAck)(nil), "PinMatrixAck")
	proto.RegisterType((*Cancel)(nil), "Cancel")
	proto.RegisterType((*PassphraseRequest)(nil), "PassphraseRequest")
	proto.RegisterType((*PassphraseAck)(nil), "PassphraseAck")
	proto.RegisterType((*GetEntropy)(nil), "GetEntropy")
	proto.RegisterType((*Entropy)(nil), "Entropy")
	proto.RegisterType((*GetPublicKey)(nil), "GetPublicKey")
	proto.RegisterType((*PublicKey)(nil), "PublicKey")
	proto.RegisterType((*GetAddress)(nil), "GetAddress")
	proto.RegisterType((*EthereumGetAddress)(nil), "EthereumGetAddress")
	proto.RegisterType((*Address)(nil), "Address")
	proto.RegisterType((*EthereumAddress)(nil), "EthereumAddress")
	proto.RegisterType((*WipeDevice)(nil), "WipeDevice")
	proto.RegisterType((*LoadDevice)(nil), "LoadDevice")
	proto.RegisterType((*ResetDevice)(nil), "ResetDevice")
	proto.RegisterType((*EntropyRequest)(nil), "EntropyRequest")
	proto.RegisterType((*EntropyAck)(nil), "EntropyAck")
	proto.RegisterType((*RecoveryDevice)(nil), "RecoveryDevice")
	proto.RegisterType((*WordRequest)(nil), "WordRequest")
	proto.RegisterType((*WordAck)(nil), "WordAck")
	proto.RegisterType((*CharacterRequest)(nil), "CharacterRequest")
	proto.RegisterType((*CharacterAck)(nil), "CharacterAck")
	proto.RegisterType((*SignMessage)(nil), "SignMessage")
	proto.RegisterType((*VerifyMessage)(nil), "VerifyMessage")
	proto.RegisterType((*MessageSignature)(nil), "MessageSignature")
	proto.RegisterType((*EncryptMessage)(nil), "EncryptMessage")
	proto.RegisterType((*EncryptedMessage)(nil), "EncryptedMessage")
	proto.RegisterType((*DecryptMessage)(nil), "DecryptMessage")
	proto.RegisterType((*DecryptedMessage)(nil), "DecryptedMessage")
	proto.RegisterType((*CipherKeyValue)(nil), "CipherKeyValue")
	proto.RegisterType((*CipheredKeyValue)(nil), "CipheredKeyValue")
	proto.RegisterType((*EstimateTxSize)(nil), "EstimateTxSize")
	proto.RegisterType((*TxSize)(nil), "TxSize")
	proto.RegisterType((*SignTx)(nil), "SignTx")
	proto.RegisterType((*SimpleSignTx)(nil), "SimpleSignTx")
	proto.RegisterType((*TxRequest)(nil), "TxRequest")
	proto.RegisterType((*TxAck)(nil), "TxAck")
	proto.RegisterType((*RawTxAck)(nil), "RawTxAck")
	proto.RegisterType((*EthereumSignTx)(nil), "EthereumSignTx")
	proto.RegisterType((*EthereumTxRequest)(nil), "EthereumTxRequest")
	proto.RegisterType((*EthereumTxAck)(nil), "EthereumTxAck")
	proto.RegisterType((*SignIdentity)(nil), "SignIdentity")
	proto.RegisterType((*SignedIdentity)(nil), "SignedIdentity")
	proto.RegisterType((*ApplyPolicies)(nil), "ApplyPolicies")
	proto.RegisterType((*FlashHash)(nil), "FlashHash")
	proto.RegisterType((*FlashWrite)(nil), "FlashWrite")
	proto.RegisterType((*FlashHashResponse)(nil), "FlashHashResponse")
	proto.RegisterType((*DebugLinkFlashDump)(nil), "DebugLinkFlashDump")
	proto.RegisterType((*DebugLinkFlashDumpResponse)(nil), "DebugLinkFlashDumpResponse")
	proto.RegisterType((*SoftReset)(nil), "SoftReset")
	proto.RegisterType((*FirmwareErase)(nil), "FirmwareErase")
	proto.RegisterType((*FirmwareUpload)(nil), "FirmwareUpload")
	proto.RegisterType((*DebugLinkDecision)(nil), "DebugLinkDecision")
	proto.RegisterType((*DebugLinkGetState)(nil), "DebugLinkGetState")
	proto.RegisterType((*DebugLinkState)(nil), "DebugLinkState")
	proto.RegisterType((*DebugLinkStop)(nil), "DebugLinkStop")
	proto.RegisterType((*DebugLinkLog)(nil), "DebugLinkLog")
	proto.RegisterType((*DebugLinkFillConfig)(nil), "DebugLinkFillConfig")
	proto.RegisterType((*DebugLinkScreenDump)(nil), "DebugLinkScreenDump")
	proto.RegisterEnum("MessageType", MessageType_name, MessageType_value)
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 3443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5a, 0xcd, 0x93, 0xdb, 0xc6,
	0x72, 0x0f, 0x3f, 0x96, 0x4b, 0x36, 0x41, 0xee, 0x2c, 0xf4, 0x61, 0x6a, 0xe5, 0x95, 0x56, 0x58,
	0x59, 0x5a, 0xd9, 0x7e, 0x94, 0x9e, 0x9e, 0xfd, 0xf2, 0xa2, 0x24, 0xf5, 0x22, 0xef, 0xae, 0x6c,
	0x45, 0x1f, 0x66, 0xc0, 0x7d, 0xd2, 0x4b, 0xe5, 0x80, 0x82, 0x80, 0x59, 0x72, 0x4c, 0x10, 0xc0,
	0x03, 0x86, 0xeb, 0xa5, 0x0f, 0xb9, 0xe6, 0x9a, 0x43, 0x0e, 0xa9, 0xca, 0x25, 0x55, 0x39, 0xc4,
	0x39, 0xa7, 0x72, 0xc8, 0xdf, 0x90, 0x4b, 0xfe, 0x88, 0x9c, 0x52, 0x39, 0xe4, 0x94, 0x5b, 0xaa,
	0x52, 0x33, 0xd3, 0x83, 0x0f, 0x2e, 0xb8, 0xb2, 0x7d, 0xc8, 0x85, 0x85, 0xee, 0xfe, 0xa1, 0xa7,
	0xbb, 0xa7, 0xa7, 0x31, 0xd3, 0x43, 0xe8, 0xcf, 0x69, 0x9a, 0xba, 0x13, 0x9a, 0x0e, 0xe3, 0x24,
	0xe2, 0xd1, 0x4e, 0x97, 0x2f, 0x63, 0x4d, 0x58, 0x06, 0xc0, 0xf3, 0x90, 0x71, 0xe6, 0x06, 0xec,
	0x3b, 0x6a, 0xf5, 0xa0, 0xfb, 0x25, 0xe5, 0xcf, 0xa8, 0xcb, 0x17, 0x09, 0x4d, 0xad, 0xff, 0xd8,
	0x80, 0xb6, 0x26, 0xcc, 0xeb, 0xd0, 0x3a, 0xa3, 0xa1, 0x1f, 0x25, 0x83, 0xda, 0x5e, 0xed, 0xa0,
	0x63, 0x23, 0x65, 0xee, 0x43, 0x6f, 0xee, 0x7e, 0x13, 0x25, 0xce, 0x19, 0x4d, 0x52, 0x16, 0x85,
	0x83, 0xfa, 0x5e, 0xed, 0xa0, 0x67, 0x1b, 0x92, 0xf9, 0x46, 0xf1, 0x24, 0x88, 0x85, 0x05, 0x50,
	0x03, 0x41, 0x82, 0x59, 0x00, 0xc5, 0x2e, 0xf7, 0xa6, 0x19, 0xa8, 0xa9, 0x40, 0x92, 0xa9, 0x41,
	0xf7, 0x61, 0xeb, 0x5d, 0x14, 0xf1, 0x20, 0x72, 0x7d, 0x9a, 0x38, 0xf3, 0xc8, 0xa7, 0x83, 0x8d,
	0xbd, 0xda, 0x41, 0xdb, 0xee, 0xe7, 0xec, 0x57, 0x91, 0x4f, 0xcd, 0x9b, 0xd0, 0xf1, 0xe9, 0x19,
	0xf3, 0xa8, 0xc3, 0xfc, 0x41, 0x4b, 0x9a, 0xdc, 0x56, 0x8c, 0xe7, 0xbe, 0xf9, 0x11, 0xf4, 0x63,
	0x16, 0x3a, 0x22, 0x06, 0xd4, 0xe3, 0x62, 0xac, 0x4d, 0xa9, 0xa4, 0x17, 0xb3, 0x70, 0x94, 0x31,
	0xcd, 0x5f, 0xc0, 0xb5, 0xd8, 0x4d, 0xd3, 0x78, 0x9a, 0xb8, 0x29, 0x2d, 0xa2, 0xdb, 0x12, 0x7d,
	0x35, 0x17, 0x16, 0x5e, 0xda, 0x81, 0x76, 0xe0, 0x86, 0x93, 0x85, 0x3b, 0xa1, 0x83, 0x8e, 0x1a,
	0x57, 0xd3, 0xe6, 0x55, 0xd8, 0x08, 0xdc, 0x77, 0x34, 0x18, 0x80, 0x14, 0x28, 0xc2, 0xbc, 0x0d,
	0x1b, 0x5e, 0xc4, 0xc2, 0x74, 0xd0, 0xdd, 0x6b, 0x1c, 0x74, 0x1f, 0x77, 0x86, 0x87, 0x11, 0x0b,
	0x4f, 0x96, 0x31, 0xb5, 0x15, 0xdf, 0xdc, 0x83, 0x2e, 0xcb, 0x66, 0xc9, 0x1f, 0x18, 0x72, 0xf4,
	0x22, 0x4b, 0x0c, 0x9a, 0xd0, 0x33, 0x26, 0xc3, 0xd6, 0xdb, 0xab, 0x1d, 0x18, 0x76, 0x46, 0xaf,
	0x84, 0x6c, 0xea, 0xa6, 0xd3, 0x41, 0x5f, 0x42, 0x0a, 0x21, 0xfb, 0xca, 0x4d, 0xa7, 0x42, 0x09,
	0x9b, 0xc7, 0x51, 0xc2, 0xa9, 0x3f, 0xd8, 0x92, 0x63, 0x64, 0xb4, 0xb9, 0x0b, 0x20, 0x22, 0xe6,
	0xb9, 0xde, 0x94, 0xfa, 0x03, 0x22, 0xa5, 0x9d, 0x98, 0x85, 0x87, 0x92, 0x61, 0x7e, 0x02, 0xdb,
	0x85, 0x48, 0x21, 0x6a, 0x5b, 0xa2, 0x48, 0x2e, 0x40, 0xf0, 0x7d, 0x68, 0xc7, 0x51, 0xc0, 0x3c,
	0x46, 0xd3, 0x81, 0x29, 0x5d, 0xee, 0x0e, 0x47, 0x82, 0xb1, 0x94, 0x4e, 0x67, 0x42, 0x11, 0x2e,
	0x31, 0xc3, 0xc1, 0xe0, 0x9a, 0xb4, 0x57, 0x11, 0xe6, 0x03, 0x20, 0xa7, 0x2c, 0x99, 0x7f, 0xeb,
	0x26, 0xd4, 0x39, 0x73, 0x13, 0xe6, 0x86, 0x7c, 0x70, 0x5d, 0xc6, 0x73, 0x4b, 0xf3, 0xdf, 0x28,
	0xb6, 0x48, 0xa9, 0x0c, 0x2a, 0x1d, 0xff, 0x40, 0x2a, 0x32, 0x34, 0x53, 0xb8, 0x6d, 0xf5, 0xc1,
	0x38, 0x0c, 0xa8, 0x9b, 0x8c, 0x69, 0x2a, 0xe2, 0x65, 0x4d, 0xa1, 0xf7, 0x34, 0x8e, 0x83, 0xe5,
	0x98, 0x72, 0xce, 0xc2, 0x49, 0x5a, 0x9a, 0xd1, 0xda, 0xba, 0x19, 0xad, 0x17, 0x67, 0xf4, 0x23,
	0xe8, 0x2f, 0x44, 0xc6, 0x64, 0x9e, 0xcb, 0x84, 0x6f, 0xdb, 0xbd, 0x45, 0x4a, 0x47, 0x19, 0xd3,
	0xda, 0x87, 0xce, 0xe1, 0xd4, 0x0d, 0x27, 0x74, 0xc4, 0x42, 0xb1, 0xc0, 0x12, 0x3a, 0x8f, 0xce,
	0xd4, 0x18, 0x6d, 0x1b, 0x29, 0xeb, 0x9f, 0x6a, 0xd0, 0x1c, 0xb1, 0x70, 0x62, 0x0e, 0x60, 0x13,
	0x97, 0x32, 0x5a, 0xa1, 0x49, 0x11, 0xfd, 0x77, 0x0b, 0xce, 0xa3, 0x52, 0x46, 0xd7, 0x55, 0xf4,
	0x95, 0xa0, 0x90, 0x9f, 0x17, 0x73, 0xbf, 0xf1, 0xa3, 0x72, 0xbf, 0xb9, 0x3e, 0xf7, 0xad, 0x7d,
	0xd8, 0x1c, 0x2f, 0x3c, 0x8f, 0xa6, 0xe9, 0x7a, 0x6b, 0xad, 0x63, 0xd8, 0x7c, 0xe6, 0xb2, 0x60,
	0x91, 0x50, 0x73, 0x0f, 0x9a, 0x9e, 0x58, 0xc2, 0x02, 0xd1, 0x7f, 0x6c, 0x0c, 0x91, 0x2f, 0xd3,
	0x40, 0x4a, 0x8a, 0x6a, 0xea, 0x65, 0x35, 0x2f, 0xa0, 0xf7, 0x85, 0xf4, 0xcd, 0xa6, 0xbf, 0x5b,
	0xd0, 0x94, 0x9b, 0xf7, 0x4a, 0xca, 0xcc, 0x61, 0x49, 0x5a, 0x50, 0x69, 0x42, 0xd3, 0x77, 0xb9,
	0x8b, 0xfa, 0xe4, 0xb3, 0xd5, 0x85, 0x8e, 0x82, 0x3f, 0xf5, 0x66, 0xd6, 0x1f, 0x03, 0x19, 0xb1,
	0xf0, 0x95, 0xcb, 0x13, 0x76, 0xae, 0x95, 0x3f, 0x80, 0xa6, 0xa8, 0x9b, 0xa8, 0xfc, 0xda, 0x70,
	0x15, 0xa0, 0xf4, 0x0b, 0x88, 0xb5, 0x07, 0x46, 0x26, 0x7d, 0xea, 0xcd, 0x4c, 0x02, 0x8d, 0x98,
	0x85, 0x83, 0xda, 0x5e, 0xfd, 0xa0, 0x63, 0x8b, 0x47, 0xab, 0x0d, 0xad, 0x43, 0x37, 0xf4, 0x68,
	0x60, 0x5d, 0x81, 0xed, 0x3c, 0x1f, 0x50, 0x95, 0xf5, 0x10, 0x7a, 0x39, 0x53, 0x68, 0xb8, 0x05,
	0x50, 0x48, 0x25, 0xa5, 0xa8, 0xc0, 0xb1, 0xf6, 0x00, 0xbe, 0xa4, 0xfc, 0x38, 0xe4, 0x49, 0x14,
	0x2f, 0x85, 0x7f, 0x29, 0xfb, 0x4e, 0xe1, 0x7a, 0xb6, 0x7c, 0x16, 0x13, 0xa3, 0xc5, 0x03, 0xd8,
	0xa4, 0xea, 0x51, 0x22, 0x0c, 0x5b, 0x93, 0xd6, 0x39, 0x18, 0x5f, 0x52, 0x3e, 0x5a, 0xbc, 0x0b,
	0x98, 0xf7, 0x82, 0x2e, 0x45, 0x09, 0x75, 0x7d, 0x3f, 0xa1, 0x69, 0xea, 0x08, 0xf3, 0x1b, 0x07,
	0x3d, 0xbb, 0x8d, 0x8c, 0xd7, 0xe6, 0x01, 0x10, 0xea, 0xf9, 0xa9, 0xeb, 0x78, 0x8b, 0xe4, 0x8c,
	0x3a, 0xa1, 0x3b, 0xd7, 0x33, 0xd4, 0x97, 0xfc, 0x43, 0xc1, 0x7e, 0xed, 0xce, 0xa9, 0x79, 0x07,
	0x8c, 0x74, 0x1a, 0x7d, 0xeb, 0xf8, 0x2c, 0x8d, 0x03, 0x77, 0x89, 0xe9, 0xd6, 0x15, 0xbc, 0x23,
	0xc5, 0xb2, 0xfe, 0x04, 0x3a, 0xf9, 0xb0, 0xb7, 0xa1, 0x19, 0xaa, 0x79, 0xac, 0xcb, 0xd2, 0xf0,
	0xd5, 0xd1, 0xeb, 0xc8, 0xc7, 0x9c, 0x08, 0x71, 0x02, 0xcf, 0xe3, 0xc5, 0x3b, 0x3d, 0x81, 0xe2,
	0xd9, 0xfa, 0xcf, 0x9a, 0x8c, 0xc1, 0x53, 0x65, 0xde, 0xe5, 0xa6, 0xdf, 0x85, 0x8e, 0xa8, 0xab,
	0x05, 0x9b, 0x9f, 0x6c, 0x7e, 0xc1, 0xb8, 0xe0, 0xd9, 0x6d, 0xf1, 0xfb, 0x03, 0xcd, 0x36, 0x3f,
	0x87, 0xf6, 0x7c, 0x11, 0x70, 0x96, 0xb2, 0x89, 0x5c, 0x16, 0xdd, 0xc7, 0x37, 0x86, 0xaf, 0x90,
	0x61, 0x53, 0x9f, 0xd2, 0xf9, 0xd8, 0x4b, 0x58, 0xac, 0x92, 0x23, 0x83, 0x9a, 0xbf, 0x86, 0x6e,
	0x2a, 0xf9, 0x8e, 0x4c, 0xa9, 0x0d, 0x99, 0x52, 0x64, 0xf8, 0x3c, 0x8c, 0x17, 0x3c, 0x7f, 0xe1,
	0x89, 0x31, 0x1e, 0x1d, 0xbf, 0x3e, 0x7a, 0x7a, 0x74, 0x64, 0x1f, 0x8f, 0xc7, 0x36, 0xa4, 0x99,
	0xc4, 0x3a, 0x01, 0xf3, 0x98, 0x4f, 0x69, 0x42, 0x17, 0xf3, 0x1f, 0xea, 0xf3, 0xaa, 0x37, 0xf5,
	0x8b, 0x93, 0xb0, 0x0f, 0x9b, 0x5a, 0xd5, 0x00, 0x36, 0xf1, 0x4d, 0xcc, 0x36, 0x4d, 0x5a, 0x9f,
	0xc0, 0x96, 0x1e, 0x7a, 0x0d, 0xd8, 0xc8, 0xc1, 0x06, 0xc0, 0x5b, 0x16, 0xd3, 0x23, 0xf9, 0xd9,
	0xb5, 0xfe, 0xbb, 0x06, 0xf0, 0x32, 0x72, 0x7d, 0x45, 0x8a, 0xaa, 0x3a, 0x0f, 0xe9, 0x3c, 0x0a,
	0x99, 0xa7, 0xab, 0xaa, 0xa6, 0xb3, 0x14, 0xa8, 0xcb, 0xa0, 0x56, 0xa4, 0x00, 0xae, 0xa9, 0x86,
	0x7c, 0x4f, 0x3c, 0xfe, 0xa4, 0x7a, 0x65, 0xee, 0x17, 0x2a, 0xfb, 0x86, 0x4a, 0x04, 0x1a, 0x4e,
	0x02, 0x96, 0x4e, 0xab, 0x4a, 0x7c, 0xab, 0x58, 0xe2, 0xf7, 0xa1, 0x97, 0xce, 0x58, 0xec, 0x78,
	0x53, 0xea, 0xcd, 0xd2, 0xc5, 0x1c, 0x77, 0x10, 0x86, 0x60, 0x1e, 0x22, 0xcf, 0xfa, 0xaf, 0x1a,
	0x74, 0x6d, 0x9a, 0x52, 0x8e, 0x3e, 0x7f, 0x04, 0x7d, 0x9c, 0x00, 0x27, 0x71, 0x43, 0x3f, 0x9a,
	0x63, 0xad, 0xef, 0x21, 0xd7, 0x96, 0x4c, 0xf3, 0x36, 0xb4, 0x53, 0x9e, 0xd0, 0x70, 0xc2, 0xa7,
	0x6a, 0x3b, 0xf5, 0xa4, 0xf1, 0xf8, 0xf3, 0x5f, 0xda, 0x19, 0x73, 0xbd, 0xb3, 0x8d, 0x4b, 0x9c,
	0xbd, 0x58, 0xf8, 0x9b, 0x55, 0x85, 0xff, 0xa7, 0xc7, 0xc4, 0x22, 0xd0, 0xc7, 0x2a, 0xa3, 0x4b,
	0xd9, 0x3d, 0x00, 0xe4, 0x88, 0x3a, 0x56, 0x2a, 0x3d, 0xb5, 0x62, 0xe9, 0xf9, 0x87, 0x3a, 0xf4,
	0x6d, 0xea, 0x45, 0x67, 0x34, 0x59, 0x62, 0xac, 0x76, 0x01, 0xbe, 0x8d, 0x12, 0xdf, 0xf1, 0xa2,
	0x45, 0xc8, 0x25, 0xbe, 0x67, 0x77, 0x04, 0xe7, 0x50, 0x30, 0xd6, 0x87, 0xa0, 0xfe, 0xa3, 0x42,
	0xd0, 0x78, 0x5f, 0x08, 0x9a, 0xef, 0x0d, 0xc1, 0x46, 0x31, 0x2d, 0x1e, 0x00, 0xa1, 0xe1, 0x69,
	0x94, 0x78, 0xd4, 0x11, 0xb6, 0x06, 0x2c, 0xe5, 0x32, 0x46, 0x6d, 0x7b, 0x0b, 0xf9, 0x6f, 0x91,
	0x6d, 0x3e, 0x82, 0xab, 0x62, 0x93, 0xe0, 0x4d, 0xdd, 0xc4, 0xf5, 0x38, 0x4d, 0x1c, 0x8f, 0xc5,
	0x53, 0x9a, 0x60, 0x22, 0x99, 0x8b, 0x94, 0x1e, 0x6a, 0xd1, 0xa1, 0x94, 0x88, 0xfd, 0xb9, 0x78,
	0x5b, 0x07, 0x77, 0x17, 0x36, 0x05, 0x29, 0x22, 0x6b, 0x42, 0x53, 0x0c, 0x87, 0xab, 0x55, 0x3e,
	0x5b, 0x36, 0x90, 0x4c, 0x81, 0xfe, 0x8c, 0xdd, 0x80, 0xb6, 0x0c, 0x6a, 0x1c, 0xa5, 0xf8, 0x7d,
	0xd8, 0x14, 0xf4, 0x28, 0x4a, 0x45, 0x42, 0xe7, 0xa6, 0x08, 0x79, 0x5d, 0xca, 0x8d, 0x8c, 0x39,
	0x8a, 0x52, 0xeb, 0xb7, 0x60, 0x64, 0x3a, 0xc5, 0xb8, 0x1f, 0x42, 0x27, 0x93, 0xe3, 0x2a, 0xce,
	0x19, 0x62, 0x4b, 0xe3, 0xd3, 0x80, 0x72, 0x8a, 0x93, 0x82, 0x94, 0xfc, 0x02, 0x47, 0xa1, 0xde,
	0x14, 0xc9, 0x67, 0xeb, 0x1b, 0xe8, 0x8e, 0xd9, 0x24, 0x7c, 0x85, 0x5b, 0x9a, 0x4b, 0x8b, 0x59,
	0x69, 0x53, 0x20, 0x2b, 0x8e, 0xde, 0x09, 0x95, 0x4a, 0x7b, 0x63, 0x4d, 0x69, 0xb7, 0xfe, 0xaa,
	0x06, 0xbd, 0x37, 0x34, 0x61, 0xa7, 0x4b, 0x3d, 0x5c, 0xa9, 0x86, 0xd5, 0x0a, 0x05, 0x4f, 0x78,
	0x98, 0xb2, 0x49, 0x28, 0x4f, 0x41, 0xd2, 0x0d, 0xc3, 0xce, 0x19, 0x45, 0x4b, 0x1a, 0x2a, 0xa3,
	0x2b, 0x2d, 0x69, 0xae, 0xb3, 0xe4, 0x4f, 0x81, 0xa0, 0x09, 0xe3, 0xa2, 0xce, 0x9f, 0x62, 0x8b,
	0xf5, 0x7d, 0x4d, 0x2c, 0x3f, 0x2f, 0x59, 0xc6, 0x5c, 0xbb, 0x75, 0x1d, 0x5a, 0xf1, 0xe2, 0xdd,
	0x8c, 0xea, 0xf5, 0x86, 0xd4, 0xea, 0xae, 0xaa, 0x60, 0xf6, 0x1d, 0x30, 0x74, 0x85, 0x8a, 0xc2,
	0x20, 0xfb, 0xea, 0x21, 0xef, 0xeb, 0x30, 0x58, 0xd9, 0x16, 0x34, 0x2f, 0xfb, 0xb6, 0x6e, 0xac,
	0x73, 0xfb, 0x0d, 0x10, 0xb4, 0x94, 0xfa, 0xda, 0xd6, 0xab, 0xb0, 0x11, 0x46, 0xa1, 0x47, 0xd1,
	0x54, 0x45, 0x5c, 0x62, 0xa9, 0x09, 0xcd, 0xe9, 0xdc, 0xf5, 0x30, 0xee, 0xf2, 0xd9, 0xfa, 0x1d,
	0xf4, 0x8f, 0x68, 0x29, 0x02, 0x97, 0xe6, 0x51, 0x36, 0x64, 0x7d, 0xcd, 0x90, 0x8d, 0xea, 0x21,
	0x9b, 0x85, 0x21, 0x9f, 0x01, 0xc1, 0x21, 0x73, 0x57, 0x56, 0xf6, 0xbe, 0x05, 0x0d, 0x85, 0xb9,
	0xad, 0x97, 0xe6, 0xd6, 0xfa, 0xb7, 0x1a, 0xf4, 0xd5, 0x32, 0x7f, 0x41, 0x97, 0x6f, 0xdc, 0x60,
	0xf1, 0x1e, 0xdb, 0x09, 0x34, 0xc4, 0xbc, 0x2a, 0x2d, 0xe2, 0x51, 0x78, 0x73, 0x26, 0xde, 0x43,
	0xab, 0x15, 0xa1, 0x6a, 0xae, 0xb4, 0x0f, 0xcb, 0xbd, 0x26, 0xcd, 0xbb, 0xd0, 0x77, 0xd3, 0x99,
	0x13, 0x85, 0x8e, 0x06, 0xa8, 0x93, 0xb4, 0xe1, 0xa6, 0xb3, 0xaf, 0xc3, 0xe3, 0x0b, 0x28, 0x5f,
	0xb9, 0x89, 0xe5, 0x4c, 0xa1, 0xd0, 0x75, 0xb3, 0x0f, 0x75, 0x76, 0x26, 0x2b, 0x97, 0x61, 0xd7,
	0xd9, 0x99, 0x75, 0x00, 0x44, 0x39, 0x43, 0xfd, 0xcc, 0x9d, 0xcc, 0xbe, 0x5a, 0xc1, 0x3e, 0xeb,
	0x2f, 0xa1, 0x7f, 0x9c, 0x72, 0x36, 0x77, 0x39, 0x3d, 0x39, 0x1f, 0xb3, 0xef, 0xa8, 0x28, 0x44,
	0xd1, 0x82, 0xc7, 0x0b, 0x9e, 0x66, 0xb5, 0x5f, 0x16, 0x22, 0x64, 0xaa, 0xf2, 0x7f, 0x07, 0x0c,
	0x16, 0x16, 0x30, 0xaa, 0x58, 0x75, 0x15, 0x4f, 0x41, 0x7e, 0x58, 0x2d, 0xb8, 0x03, 0x2d, 0x1c,
	0xf7, 0x03, 0xd8, 0xe4, 0xe7, 0x0e, 0x6e, 0x9d, 0xc5, 0xd7, 0xa6, 0xc5, 0xa5, 0xc0, 0xfa, 0xe7,
	0x1a, 0xb4, 0xc4, 0xf2, 0x3c, 0x39, 0xff, 0xff, 0xb5, 0xcd, 0xbc, 0x09, 0x9b, 0xa5, 0x5e, 0xc8,
	0x93, 0xda, 0xcf, 0x6d, 0xcd, 0x31, 0x6f, 0x41, 0x27, 0x88, 0xbc, 0x99, 0xc3, 0x19, 0xae, 0xb4,
	0xde, 0x93, 0xda, 0x23, 0xbb, 0x2d, 0x78, 0x27, 0x6c, 0x4e, 0xad, 0xff, 0xa9, 0x81, 0x31, 0x66,
	0xf3, 0x38, 0xa0, 0x68, 0xfb, 0x5d, 0x68, 0x29, 0x13, 0x64, 0x2e, 0x75, 0x1f, 0x1b, 0xc3, 0x93,
	0x73, 0xb9, 0xe7, 0x94, 0xfb, 0x2a, 0x94, 0x99, 0xf7, 0x61, 0x13, 0x9d, 0x19, 0xd4, 0x25, 0xac,
	0x37, 0x3c, 0x39, 0xff, 0x5a, 0x72, 0x24, 0x4e, 0x4b, 0xcd, 0xcf, 0xc0, 0xe0, 0x89, 0x1b, 0xa6,
	0xae, 0xfc, 0x66, 0xa6, 0x83, 0x86, 0x44, 0x93, 0xe1, 0x49, 0xce, 0x94, 0x2f, 0x94, 0x50, 0x3f,
	0xac, 0x2c, 0x16, 0x1d, 0xdf, 0xb8, 0xdc, 0xf1, 0xd6, 0x45, 0xc7, 0xff, 0xb1, 0x06, 0x9d, 0x93,
	0xec, 0xe0, 0xf6, 0x10, 0x8c, 0x44, 0x3d, 0x3a, 0x85, 0x03, 0x9c, 0x31, 0x2c, 0x9e, 0xdb, 0xba,
	0x49, 0x4e, 0x98, 0x0f, 0x61, 0xd3, 0xa7, 0xdc, 0x65, 0x41, 0x8a, 0xdb, 0xcf, 0x6b, 0xc3, 0x4c,
	0xdb, 0x91, 0x12, 0xa8, 0x40, 0x20, 0xca, 0xfc, 0x15, 0x40, 0x4a, 0x13, 0xdd, 0x9c, 0x69, 0xc8,
	0x77, 0x06, 0xf9, 0x3b, 0xe3, 0x4c, 0x26, 0x5f, 0x2b, 0x60, 0xad, 0x07, 0xb0, 0x71, 0x22, 0x8f,
	0x88, 0x7b, 0x50, 0xe7, 0xe7, 0xd2, 0xb4, 0xaa, 0x08, 0xd6, 0xf9, 0xb9, 0xf5, 0x10, 0xda, 0xb6,
	0xfb, 0xad, 0x42, 0xef, 0x17, 0xd0, 0x57, 0x86, 0x82, 0x5d, 0xf1, 0xc2, 0xff, 0x36, 0xa0, 0xaf,
	0x77, 0xea, 0x98, 0x00, 0x3f, 0xa1, 0x16, 0xde, 0x84, 0xce, 0xc4, 0x4d, 0x9d, 0x38, 0x61, 0x9e,
	0xae, 0x2b, 0xed, 0x89, 0x9b, 0x8e, 0x04, 0xad, 0x85, 0x01, 0x9b, 0x33, 0x8e, 0x35, 0x51, 0x08,
	0x5f, 0x0a, 0x5a, 0x54, 0x04, 0x1e, 0xc9, 0xd9, 0x33, 0xec, 0x3a, 0x8f, 0xf2, 0xd5, 0xdf, 0x2a,
	0x56, 0xa7, 0x4f, 0xc1, 0x14, 0xe7, 0x6f, 0x07, 0x7b, 0x59, 0x8e, 0x37, 0x5d, 0x84, 0x33, 0xac,
	0x23, 0x44, 0x48, 0xb0, 0x3b, 0x79, 0x28, 0xf8, 0xe6, 0x6d, 0xe8, 0x4a, 0x74, 0xa0, 0xb6, 0xc6,
	0x6d, 0xb9, 0x4a, 0x41, 0xb0, 0x5e, 0xaa, 0x7d, 0xf1, 0x1e, 0x18, 0x3c, 0x72, 0x72, 0x27, 0x3b,
	0xd2, 0x49, 0xe0, 0xd1, 0x53, 0xed, 0xe6, 0xe7, 0x60, 0x68, 0xb1, 0x4c, 0x07, 0xc0, 0x66, 0x81,
	0xca, 0x70, 0x84, 0xa9, 0xa4, 0x70, 0x73, 0xc2, 0x7c, 0x0c, 0x3d, 0x7a, 0xee, 0xc9, 0x5e, 0x8d,
	0x7a, 0xaf, 0x2b, 0xa3, 0xdf, 0x1b, 0x1e, 0x23, 0x57, 0xa5, 0x3a, 0x2d, 0x50, 0x62, 0xaf, 0xe5,
	0x4d, 0x5d, 0x16, 0x3a, 0x4c, 0xb5, 0xec, 0x7a, 0xf6, 0xa6, 0xa4, 0x9f, 0xfb, 0xc2, 0x11, 0x1e,
	0xcd, 0x68, 0xe8, 0xa8, 0x90, 0xf8, 0xd2, 0x5f, 0x90, 0x2c, 0x55, 0x2b, 0x6f, 0x40, 0x5b, 0x01,
	0x78, 0x34, 0xa0, 0xea, 0x13, 0x22, 0xe9, 0x93, 0x48, 0xec, 0x61, 0x95, 0x28, 0x9d, 0x46, 0x09,
	0xf7, 0x16, 0x7c, 0x70, 0x2a, 0xbf, 0x01, 0x3d, 0xc9, 0x1d, 0x23, 0xd3, 0xfa, 0xf7, 0x1a, 0x6c,
	0xeb, 0xf9, 0xcf, 0x57, 0xc3, 0x4a, 0x04, 0x6b, 0x17, 0x22, 0x78, 0x1b, 0xba, 0xd9, 0x8e, 0xc2,
	0x39, 0xc3, 0x66, 0x2e, 0x64, 0xac, 0x37, 0x65, 0x40, 0x82, 0x39, 0x91, 0x03, 0xec, 0x32, 0x20,
	0xc5, 0xbc, 0xc8, 0x01, 0x63, 0xf9, 0x15, 0x75, 0xd3, 0x29, 0xe6, 0x86, 0x7c, 0x96, 0xa7, 0xa9,
	0xec, 0x25, 0x9f, 0x26, 0x98, 0x25, 0x46, 0xc6, 0x3c, 0xa2, 0x89, 0x35, 0x84, 0x5e, 0xee, 0x91,
	0x58, 0x08, 0xbb, 0x20, 0x4d, 0xc7, 0xac, 0x51, 0x9f, 0x95, 0x8e, 0xe0, 0xc8, 0x74, 0xb1, 0xfe,
	0x55, 0x56, 0xc0, 0x49, 0xf8, 0xdc, 0xa7, 0x21, 0x67, 0x7c, 0x69, 0x3e, 0x80, 0x36, 0xc3, 0x67,
	0x5c, 0x3e, 0xbd, 0xa1, 0x16, 0xaa, 0x33, 0x3a, 0xcb, 0xa1, 0xc4, 0x9b, 0xba, 0x81, 0x88, 0x13,
	0x75, 0xa6, 0xcc, 0xf7, 0x69, 0x88, 0x2b, 0x63, 0x2b, 0xe3, 0x7f, 0x25, 0xd9, 0x65, 0xe8, 0x19,
	0x4b, 0x17, 0x6e, 0x80, 0x07, 0xd3, 0x1c, 0xfa, 0x46, 0xb2, 0x2b, 0x9b, 0x26, 0xcd, 0xaa, 0xa6,
	0x89, 0x35, 0x81, 0xbe, 0x30, 0x9d, 0xfa, 0x99, 0xf1, 0xeb, 0xb7, 0x85, 0xbb, 0x00, 0xb1, 0xec,
	0x9e, 0x38, 0x7a, 0x47, 0x60, 0xd8, 0x9d, 0x38, 0xeb, 0xa7, 0x94, 0x76, 0x8d, 0x8d, 0xd5, 0x5d,
	0xe3, 0x67, 0xd8, 0xed, 0x1c, 0xe9, 0xa6, 0xeb, 0x3e, 0xb4, 0x64, 0x03, 0x76, 0x89, 0x9f, 0x89,
	0x52, 0x6f, 0x16, 0x45, 0xd6, 0x5f, 0x40, 0xe7, 0x59, 0xe0, 0xa6, 0x53, 0xd9, 0x37, 0x5e, 0xb1,
	0xac, 0x97, 0x5b, 0x76, 0x1d, 0x5a, 0x41, 0xe1, 0x18, 0x6b, 0x23, 0x85, 0xc7, 0x06, 0x15, 0x1a,
	0x6d, 0x52, 0xc6, 0xb0, 0x46, 0x00, 0x52, 0xf9, 0xdb, 0x84, 0x71, 0x7a, 0x89, 0xf6, 0x62, 0x23,
	0xcf, 0x50, 0x8d, 0x3c, 0x51, 0x66, 0x68, 0xa1, 0xe1, 0xaa, 0x08, 0xeb, 0x3e, 0x6c, 0x67, 0xe6,
	0xda, 0x34, 0x8d, 0xa3, 0x30, 0xcd, 0xfb, 0x80, 0xb5, 0xfc, 0x75, 0xeb, 0x19, 0x98, 0x47, 0xf4,
	0xdd, 0x62, 0xf2, 0x92, 0x85, 0x33, 0xf9, 0xc6, 0xd1, 0x62, 0x1e, 0xff, 0x78, 0x07, 0xad, 0x47,
	0xb0, 0x73, 0x51, 0xcf, 0xa5, 0x23, 0x77, 0xa1, 0x33, 0x8e, 0x4e, 0xb9, 0xec, 0x16, 0x58, 0x5b,
	0xd0, 0x7b, 0x86, 0x2d, 0xea, 0x63, 0xe9, 0xc0, 0x2b, 0xe8, 0x6b, 0xc6, 0x6f, 0xe2, 0x20, 0x72,
	0x7d, 0xb1, 0xc9, 0x88, 0xdd, 0xa5, 0x78, 0x54, 0x9d, 0x6d, 0xd5, 0x7a, 0xe9, 0x22, 0x4f, 0xcf,
	0x0b, 0x92, 0xfa, 0x98, 0x84, 0xa4, 0xf5, 0x31, 0x6c, 0x67, 0xe6, 0x1d, 0x51, 0x4f, 0xdd, 0x13,
	0x5c, 0x83, 0xd6, 0x92, 0xa6, 0x4e, 0x18, 0x49, 0x5d, 0x6d, 0x7b, 0x63, 0x49, 0xd3, 0xd7, 0x91,
	0x75, 0xa5, 0x80, 0xfd, 0x92, 0xf2, 0x31, 0x77, 0x39, 0xb5, 0xfe, 0xa6, 0x29, 0x76, 0xda, 0xc8,
	0x95, 0x2c, 0x19, 0x0a, 0x77, 0x19, 0x2d, 0xb8, 0x3e, 0x6b, 0x28, 0x4a, 0xb7, 0x6a, 0xea, 0x79,
	0xab, 0xe6, 0x3a, 0xb4, 0xe6, 0xb2, 0x3b, 0x8a, 0xcb, 0x04, 0xa9, 0x52, 0x47, 0xa8, 0xb9, 0xa6,
	0x23, 0xb4, 0xb1, 0xae, 0x23, 0xb4, 0xb6, 0x1f, 0xd0, 0xba, 0xa4, 0x1f, 0xb0, 0x0b, 0x90, 0x88,
	0x80, 0xcb, 0xb3, 0xba, 0xfc, 0xec, 0x74, 0xec, 0x8e, 0xe4, 0x88, 0x83, 0xb5, 0xa8, 0x4a, 0x4a,
	0xac, 0xbb, 0x16, 0x6d, 0x55, 0x95, 0x24, 0x53, 0xf7, 0x53, 0x3f, 0x05, 0x33, 0xc1, 0xce, 0x85,
	0x73, 0xea, 0xce, 0xd4, 0xb9, 0x1f, 0x6f, 0x7e, 0x88, 0x96, 0x3c, 0x73, 0x67, 0xf2, 0xe0, 0x6f,
	0x7e, 0x0c, 0xdb, 0x19, 0x3a, 0x3b, 0x89, 0x83, 0xcc, 0x9d, 0x2d, 0x2d, 0x78, 0x8b, 0x27, 0xf2,
	0xfb, 0x90, 0xb1, 0x74, 0x6f, 0xa0, 0xab, 0x8a, 0x85, 0x66, 0xab, 0x3d, 0xb6, 0xf9, 0x6b, 0xf8,
	0x30, 0x03, 0xba, 0x0b, 0x1e, 0x39, 0x5e, 0x24, 0xf6, 0x7d, 0x9c, 0xfa, 0xca, 0x18, 0x43, 0xbe,
	0x75, 0x43, 0x63, 0x9e, 0x2e, 0x78, 0x74, 0xa8, 0x11, 0xda, 0xd1, 0xf2, 0x3d, 0x49, 0xef, 0xe2,
	0x3d, 0x89, 0x6c, 0x21, 0xf2, 0x28, 0x71, 0x27, 0xb4, 0x78, 0x89, 0xd4, 0x45, 0x9e, 0xbc, 0x4a,
	0xd9, 0x82, 0x5e, 0x21, 0x2b, 0xa2, 0xd8, 0x1a, 0x81, 0x91, 0x31, 0x5e, 0x46, 0x13, 0xd9, 0x34,
	0xa1, 0x67, 0x34, 0xc0, 0x75, 0xa4, 0x08, 0x91, 0x10, 0xef, 0x16, 0xde, 0x8c, 0x72, 0xcc, 0x12,
	0xa4, 0xc4, 0x3a, 0xe1, 0xf4, 0x9c, 0x63, 0x9a, 0xc8, 0x67, 0xeb, 0x1a, 0x5c, 0xc9, 0x57, 0x16,
	0x0b, 0x82, 0xc3, 0x28, 0x3c, 0x65, 0x13, 0xeb, 0x67, 0x05, 0xf6, 0xd8, 0x4b, 0x28, 0x0d, 0xe5,
	0xca, 0xbd, 0x0e, 0xad, 0x54, 0x52, 0x3a, 0x29, 0x15, 0xf5, 0xf1, 0xdf, 0x5d, 0x85, 0x2e, 0x9e,
	0xd6, 0xe4, 0xb7, 0x7a, 0x0f, 0xae, 0x17, 0x48, 0x27, 0xbf, 0x13, 0x25, 0xbf, 0xb7, 0xd3, 0xfc,
	0xeb, 0x7f, 0x19, 0xd4, 0xcc, 0x9d, 0xec, 0xa4, 0x2e, 0x11, 0x23, 0x16, 0x4e, 0x48, 0x0d, 0x65,
	0xbb, 0x70, 0xa5, 0x28, 0xc3, 0x2b, 0x10, 0x52, 0xdf, 0x69, 0xfe, 0x6d, 0x85, 0x18, 0x2f, 0x39,
	0x48, 0x03, 0xc5, 0xb7, 0xe1, 0x5a, 0x51, 0x9c, 0xdd, 0x08, 0x91, 0x26, 0xaa, 0x5f, 0x31, 0x2e,
	0x6f, 0xa9, 0x92, 0x0d, 0x44, 0xec, 0xc3, 0x8d, 0xd2, 0x08, 0xc5, 0xda, 0x41, 0x5a, 0x08, 0xba,
	0x0b, 0x3b, 0x55, 0x20, 0x55, 0x4f, 0xc8, 0x66, 0xf5, 0x60, 0xf9, 0xbd, 0x02, 0xe9, 0x54, 0x7b,
	0xab, 0xc5, 0x80, 0xee, 0x58, 0x30, 0x58, 0x51, 0x90, 0xb5, 0xf6, 0x49, 0x17, 0x55, 0xac, 0xb8,
	0x9c, 0x03, 0x0c, 0x54, 0xb2, 0x62, 0x45, 0xde, 0x36, 0x26, 0x3d, 0x54, 0x71, 0x07, 0x3e, 0x28,
	0x22, 0x0a, 0x5d, 0x56, 0xd2, 0x47, 0xc8, 0x87, 0x60, 0x96, 0xa6, 0x45, 0xee, 0x82, 0xc9, 0x16,
	0x4a, 0x57, 0xec, 0x2c, 0x1e, 0x95, 0x08, 0x41, 0xcc, 0x2d, 0xb8, 0x5a, 0x0a, 0x19, 0x5e, 0x86,
	0x93, 0x6d, 0x34, 0xf3, 0x1e, 0x7c, 0xb8, 0x92, 0x14, 0xa5, 0x4b, 0x21, 0x62, 0x56, 0xc7, 0xa4,
	0x78, 0x3d, 0x44, 0xae, 0x54, 0x5b, 0xab, 0x2e, 0x88, 0xc8, 0xd5, 0xea, 0x88, 0x65, 0x3b, 0x3a,
	0x72, 0x0d, 0x87, 0xb8, 0x09, 0xdb, 0x65, 0x80, 0xd0, 0x7d, 0xbd, 0x7a, 0xea, 0xcb, 0x7d, 0x06,
	0xf2, 0x41, 0x75, 0x44, 0x8a, 0x97, 0xa2, 0x64, 0x50, 0x9d, 0x69, 0xa5, 0x8b, 0x52, 0x72, 0xa3,
	0x1a, 0x54, 0xba, 0x88, 0x23, 0x3b, 0xd5, 0x69, 0x9f, 0x5d, 0xbf, 0x91, 0x9b, 0x6b, 0x33, 0x11,
	0xb7, 0xe7, 0x64, 0xb7, 0x3a, 0x13, 0xb5, 0xf8, 0x16, 0x8e, 0xb0, 0xe2, 0x75, 0xb9, 0x35, 0x4d,
	0xf6, 0xab, 0x53, 0x2d, 0x6f, 0x57, 0x93, 0xbb, 0xd5, 0xa9, 0x56, 0x68, 0x53, 0x92, 0x7b, 0xd5,
	0x1e, 0x97, 0x9a, 0x8b, 0xe4, 0x3e, 0x82, 0x56, 0xb2, 0x65, 0xb5, 0xf1, 0x47, 0x0e, 0xd0, 0xa2,
	0xfb, 0xb0, 0x5b, 0xca, 0x96, 0xd5, 0x0b, 0x42, 0xf2, 0x00, 0x81, 0x2b, 0xa3, 0x96, 0x2e, 0x0d,
	0xc9, 0xc7, 0xd5, 0x73, 0x5f, 0x6e, 0xb6, 0x90, 0x4f, 0xaa, 0xb3, 0x0f, 0xa5, 0x9f, 0x56, 0x47,
	0xb2, 0xdc, 0xa9, 0x27, 0x3f, 0xab, 0x8e, 0x53, 0xa1, 0x55, 0x4d, 0x86, 0xd5, 0xa5, 0x10, 0xdb,
	0xd7, 0xe4, 0x61, 0x75, 0x84, 0x56, 0x5b, 0x48, 0xe4, 0xd1, 0xba, 0x99, 0x2d, 0xf6, 0xfc, 0xc8,
	0xcf, 0xab, 0xb5, 0xad, 0x76, 0x1c, 0xc9, 0xe3, 0x6a, 0x6d, 0xe5, 0x0e, 0x22, 0xf9, 0x45, 0xb5,
	0xb6, 0xd5, 0xa6, 0x1f, 0xf9, 0xac, 0x7a, 0xad, 0x17, 0x0f, 0x20, 0xe4, 0xf3, 0xea, 0x39, 0x29,
	0xef, 0xf4, 0xc9, 0x2f, 0x51, 0xd3, 0x4a, 0x3c, 0x0b, 0x7f, 0xcd, 0x21, 0xbf, 0x8f, 0x8a, 0x0e,
	0xe0, 0x56, 0xc9, 0xc5, 0x0b, 0xb7, 0x82, 0xe4, 0x57, 0x88, 0xfc, 0x08, 0x6e, 0x56, 0x21, 0x35,
	0xec, 0x0f, 0xd6, 0x44, 0xb6, 0xd4, 0x41, 0x20, 0x4f, 0x50, 0xd9, 0x4a, 0x86, 0x5e, 0x38, 0x67,
	0x92, 0x3f, 0xac, 0xce, 0xd0, 0xd2, 0xf1, 0x8d, 0xfc, 0xd1, 0x9a, 0x59, 0x5f, 0xb9, 0xb4, 0x20,
	0xa3, 0xea, 0xc8, 0x16, 0x2f, 0x22, 0xc8, 0x9f, 0x55, 0x57, 0x6c, 0xdd, 0x33, 0x21, 0xf6, 0x25,
	0xf5, 0x4b, 0x1f, 0x7d, 0xc8, 0xb8, 0xba, 0xd8, 0x66, 0x47, 0x07, 0x72, 0x52, 0x5d, 0x9a, 0xf2,
	0xd3, 0x0a, 0xf9, 0x4d, 0x75, 0x84, 0x2e, 0x9c, 0x3e, 0xc8, 0x1b, 0x74, 0x6a, 0x65, 0x06, 0x2f,
	0x9e, 0x1a, 0xc8, 0xdb, 0x9d, 0xe6, 0xdf, 0x0b, 0xe4, 0x23, 0xb8, 0x77, 0x39, 0x32, 0xd3, 0xfd,
	0xdb, 0x9d, 0xe6, 0xf7, 0x15, 0x7e, 0x64, 0xe7, 0x0b, 0xf2, 0xe7, 0xa8, 0x72, 0xc5, 0xca, 0x0b,
	0x67, 0x02, 0xe2, 0xbf, 0x07, 0xa8, 0x0f, 0x04, 0x84, 0x22, 0xf0, 0xc2, 0x5a, 0x2a, 0x9e, 0x11,
	0xc8, 0x29, 0x1a, 0xb6, 0x32, 0x0b, 0xa5, 0x3d, 0x23, 0x99, 0xa0, 0xaa, 0x95, 0xe9, 0x2e, 0xee,
	0x23, 0xc9, 0x14, 0x15, 0x3d, 0x80, 0xdb, 0xd5, 0x31, 0xc9, 0x76, 0x86, 0x84, 0xbd, 0x07, 0x9a,
	0xef, 0x16, 0xc9, 0x37, 0x0a, 0xfa, 0xc5, 0xa7, 0xb0, 0xe3, 0x45, 0xf3, 0xe1, 0x8c, 0xd2, 0x78,
	0x46, 0x97, 0x43, 0xf5, 0xb7, 0x31, 0xf9, 0x87, 0x39, 0x2f, 0x0a, 0xbe, 0xe8, 0xbf, 0xa0, 0x34,
	0x7e, 0x41, 0x75, 0x79, 0xff, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x07, 0xf9, 0x34, 0x2a, 0x61,
	0x27, 0x00, 0x00,
}
