
// Code generated by typeRegistryGenerator.go. DO NOT EDIT.

package kkProto

import (
	"reflect"
)

func init() {
	
	TypeRegistry["Initialize"] = reflect.TypeOf(Initialize{})
	
	TypeRegistry["GetFeatures"] = reflect.TypeOf(GetFeatures{})
	
	TypeRegistry["Features"] = reflect.TypeOf(Features{})
	
	TypeRegistry["GetCoinTable"] = reflect.TypeOf(GetCoinTable{})
	
	TypeRegistry["CoinTable"] = reflect.TypeOf(CoinTable{})
	
	TypeRegistry["ClearSession"] = reflect.TypeOf(ClearSession{})
	
	TypeRegistry["ApplySettings"] = reflect.TypeOf(ApplySettings{})
	
	TypeRegistry["ChangePin"] = reflect.TypeOf(ChangePin{})
	
	TypeRegistry["Ping"] = reflect.TypeOf(Ping{})
	
	TypeRegistry["Success"] = reflect.TypeOf(Success{})
	
	TypeRegistry["Failure"] = reflect.TypeOf(Failure{})
	
	TypeRegistry["ButtonRequest"] = reflect.TypeOf(ButtonRequest{})
	
	TypeRegistry["ButtonAck"] = reflect.TypeOf(ButtonAck{})
	
	TypeRegistry["PinMatrixRequest"] = reflect.TypeOf(PinMatrixRequest{})
	
	TypeRegistry["PinMatrixAck"] = reflect.TypeOf(PinMatrixAck{})
	
	TypeRegistry["Cancel"] = reflect.TypeOf(Cancel{})
	
	TypeRegistry["PassphraseRequest"] = reflect.TypeOf(PassphraseRequest{})
	
	TypeRegistry["PassphraseAck"] = reflect.TypeOf(PassphraseAck{})
	
	TypeRegistry["GetEntropy"] = reflect.TypeOf(GetEntropy{})
	
	TypeRegistry["Entropy"] = reflect.TypeOf(Entropy{})
	
	TypeRegistry["GetPublicKey"] = reflect.TypeOf(GetPublicKey{})
	
	TypeRegistry["PublicKey"] = reflect.TypeOf(PublicKey{})
	
	TypeRegistry["GetAddress"] = reflect.TypeOf(GetAddress{})
	
	TypeRegistry["EthereumGetAddress"] = reflect.TypeOf(EthereumGetAddress{})
	
	TypeRegistry["Address"] = reflect.TypeOf(Address{})
	
	TypeRegistry["EthereumAddress"] = reflect.TypeOf(EthereumAddress{})
	
	TypeRegistry["WipeDevice"] = reflect.TypeOf(WipeDevice{})
	
	TypeRegistry["LoadDevice"] = reflect.TypeOf(LoadDevice{})
	
	TypeRegistry["ResetDevice"] = reflect.TypeOf(ResetDevice{})
	
	TypeRegistry["EntropyRequest"] = reflect.TypeOf(EntropyRequest{})
	
	TypeRegistry["EntropyAck"] = reflect.TypeOf(EntropyAck{})
	
	TypeRegistry["RecoveryDevice"] = reflect.TypeOf(RecoveryDevice{})
	
	TypeRegistry["WordRequest"] = reflect.TypeOf(WordRequest{})
	
	TypeRegistry["WordAck"] = reflect.TypeOf(WordAck{})
	
	TypeRegistry["CharacterRequest"] = reflect.TypeOf(CharacterRequest{})
	
	TypeRegistry["CharacterAck"] = reflect.TypeOf(CharacterAck{})
	
	TypeRegistry["SignMessage"] = reflect.TypeOf(SignMessage{})
	
	TypeRegistry["VerifyMessage"] = reflect.TypeOf(VerifyMessage{})
	
	TypeRegistry["MessageSignature"] = reflect.TypeOf(MessageSignature{})
	
	TypeRegistry["EncryptMessage"] = reflect.TypeOf(EncryptMessage{})
	
	TypeRegistry["EncryptedMessage"] = reflect.TypeOf(EncryptedMessage{})
	
	TypeRegistry["DecryptMessage"] = reflect.TypeOf(DecryptMessage{})
	
	TypeRegistry["DecryptedMessage"] = reflect.TypeOf(DecryptedMessage{})
	
	TypeRegistry["CipherKeyValue"] = reflect.TypeOf(CipherKeyValue{})
	
	TypeRegistry["CipheredKeyValue"] = reflect.TypeOf(CipheredKeyValue{})
	
	TypeRegistry["EstimateTxSize"] = reflect.TypeOf(EstimateTxSize{})
	
	TypeRegistry["TxSize"] = reflect.TypeOf(TxSize{})
	
	TypeRegistry["SignTx"] = reflect.TypeOf(SignTx{})
	
	TypeRegistry["SimpleSignTx"] = reflect.TypeOf(SimpleSignTx{})
	
	TypeRegistry["TxRequest"] = reflect.TypeOf(TxRequest{})
	
	TypeRegistry["TxAck"] = reflect.TypeOf(TxAck{})
	
	TypeRegistry["RawTxAck"] = reflect.TypeOf(RawTxAck{})
	
	TypeRegistry["EthereumSignTx"] = reflect.TypeOf(EthereumSignTx{})
	
	TypeRegistry["EthereumTxRequest"] = reflect.TypeOf(EthereumTxRequest{})
	
	TypeRegistry["EthereumTxAck"] = reflect.TypeOf(EthereumTxAck{})
	
	TypeRegistry["SignIdentity"] = reflect.TypeOf(SignIdentity{})
	
	TypeRegistry["SignedIdentity"] = reflect.TypeOf(SignedIdentity{})
	
	TypeRegistry["ApplyPolicies"] = reflect.TypeOf(ApplyPolicies{})
	
	TypeRegistry["FlashHash"] = reflect.TypeOf(FlashHash{})
	
	TypeRegistry["FlashWrite"] = reflect.TypeOf(FlashWrite{})
	
	TypeRegistry["FlashHashResponse"] = reflect.TypeOf(FlashHashResponse{})
	
	TypeRegistry["DebugLinkFlashDump"] = reflect.TypeOf(DebugLinkFlashDump{})
	
	TypeRegistry["DebugLinkFlashDumpResponse"] = reflect.TypeOf(DebugLinkFlashDumpResponse{})
	
	TypeRegistry["SoftReset"] = reflect.TypeOf(SoftReset{})
	
	TypeRegistry["FirmwareErase"] = reflect.TypeOf(FirmwareErase{})
	
	TypeRegistry["FirmwareUpload"] = reflect.TypeOf(FirmwareUpload{})
	
	TypeRegistry["DebugLinkDecision"] = reflect.TypeOf(DebugLinkDecision{})
	
	TypeRegistry["DebugLinkGetState"] = reflect.TypeOf(DebugLinkGetState{})
	
	TypeRegistry["DebugLinkState"] = reflect.TypeOf(DebugLinkState{})
	
	TypeRegistry["DebugLinkStop"] = reflect.TypeOf(DebugLinkStop{})
	
	TypeRegistry["DebugLinkLog"] = reflect.TypeOf(DebugLinkLog{})
	
	TypeRegistry["DebugLinkFillConfig"] = reflect.TypeOf(DebugLinkFillConfig{})
	
	TypeRegistry["HDNodeType"] = reflect.TypeOf(HDNodeType{})
	
	TypeRegistry["HDNodePathType"] = reflect.TypeOf(HDNodePathType{})
	
	TypeRegistry["CoinType"] = reflect.TypeOf(CoinType{})
	
	TypeRegistry["MultisigRedeemScriptType"] = reflect.TypeOf(MultisigRedeemScriptType{})
	
	TypeRegistry["TxInputType"] = reflect.TypeOf(TxInputType{})
	
	TypeRegistry["TxOutputType"] = reflect.TypeOf(TxOutputType{})
	
	TypeRegistry["TxOutputBinType"] = reflect.TypeOf(TxOutputBinType{})
	
	TypeRegistry["TransactionType"] = reflect.TypeOf(TransactionType{})
	
	TypeRegistry["RawTransactionType"] = reflect.TypeOf(RawTransactionType{})
	
	TypeRegistry["TxRequestDetailsType"] = reflect.TypeOf(TxRequestDetailsType{})
	
	TypeRegistry["TxRequestSerializedType"] = reflect.TypeOf(TxRequestSerializedType{})
	
	TypeRegistry["IdentityType"] = reflect.TypeOf(IdentityType{})
	
	TypeRegistry["PolicyType"] = reflect.TypeOf(PolicyType{})
	
	TypeRegistry["ExchangeType"] = reflect.TypeOf(ExchangeType{})
	
	TypeRegistry["ExchangeAddress"] = reflect.TypeOf(ExchangeAddress{})
	
	TypeRegistry["ExchangeResponseV2"] = reflect.TypeOf(ExchangeResponseV2{})
	
	TypeRegistry["SignedExchangeResponse"] = reflect.TypeOf(SignedExchangeResponse{})
	
	TypeRegistry["ExchangeResponse"] = reflect.TypeOf(ExchangeResponse{})
	
	TypeRegistry["Storage"] = reflect.TypeOf(Storage{})
	
}

var TypeRegistry = make(map[string]reflect.Type)
